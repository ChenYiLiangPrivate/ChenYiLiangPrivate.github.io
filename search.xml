<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>传输层</title>
    <url>/2022/04/07/transport-layer/</url>
    <content><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p>传输层提供了进程间的逻辑通信</p>
<span id="more"></span>

<p>套接字的唯一标识符</p>
<ul>
<li>端口号存在于 UDP&#x2F;TCP 报文段的首部当中，IP 地址存在于网络层首部</li>
<li>UDP 套接字由二元组（目的IP地址，目的端口号）唯一标识。</li>
<li>TCP 套接字由四元组（源IP地址，源端口号，目的IP地址，目的端口号）唯一标识</li>
</ul>
<p>如果我们确定一台主机上打开了某个端口，也许就能知道该端口对应的进程。进而管理&#x2F;攻击这个进程。</p>
<p><strong>传输层的多路复用与多路分解</strong></p>
<ul>
<li>多路复用：发送方从本机不同的套接字中收集数据块，并添加传输层首部（按照目的 IP 地址合并，合并后共享一个传输层首部）</li>
<li>多路分解：接收方将传输层报文段分段交付到正确的套接字</li>
</ul>
<h2 id="UDP-和-TCP-的特点"><a href="#UDP-和-TCP-的特点" class="headerlink" title="UDP 和 TCP 的特点"></a>UDP 和 TCP 的特点</h2><ul>
<li>UDP（User Datagram Protocol，用户数据报协议）<ul>
<li>无连接的。在进程通信前没有握手过程，自然也没有挥手过程。</li>
<li>面向报文。实际上的意思是，UDP 每个报文是独立的，不存在顺序关系（没有序号）</li>
<li>不可靠数据传输：到达的字节流可能乱序且不完整</li>
<li>没有流量控制和拥塞控制（不维护缓存窗口）</li>
</ul>
</li>
<li>TCP（Transmission Control Protocol，传输控制协议）<ul>
<li>面向连接。握手建立连接，挥手释放连接</li>
<li>全双工，可以 <strong>同时</strong> 进行报文的收发（报文段既包含发送的数据，又包含 ACK）</li>
<li>面向字节流（把应用层传下来的报文看成字节流，字节流被划分有<strong>有序号</strong>的报文段）</li>
<li>可靠数据传输：无差错（字节流顺序不变）、数据完整传输（不丢包）</li>
<li>流量控制和拥塞控制</li>
</ul>
</li>
</ul>
<blockquote>
<p>UDP 相较于 TCP 的优点：</p>
<p>TCP 为了实现可靠数据传输，会带来额外的资源开销。</p>
<p>空间上，TCP 需要的首部字段更多，一个 TCP 报文段的有效载荷占比相对 UDP 来说更少；TCP 在连接建立和拆除的时候需要发额外的报文段</p>
<p>时间上，具体的时间消耗有，在连接建立和拆除的时候需要发额外的报文段，每次收发数据都要更新缓冲窗口、定时器，一旦检测到丢包会进行重传，这会导致时延</p>
</blockquote>
<h2 id="UDP-和-TCP-的应用场景"><a href="#UDP-和-TCP-的应用场景" class="headerlink" title="UDP 和 TCP 的应用场景"></a>UDP 和 TCP 的应用场景</h2><p>TCP 用于有必要实现可靠传输的情况：FTP文件传输、HTTP &#x2F; HTTPS</p>
<p>UDP 主要用于两种场景</p>
<ul>
<li>对高速传输和实时性有较高要求的场景，可以容忍一定的丢包率：网上会议、直播</li>
<li>短连接通信，如果业务只需要发一两个包，同时业务自己有简单的轮询或重复机制（编程额外加入，不属于UDP协议，可以检测丢包）。在这样的场景下，如果用 TCP，仅仅握手就需要3个包，这样显然有点不划算，一个典型的例子是 DNS 查询。</li>
</ul>
<p>DNS 为什么使用 UDP：需要传输的 DNS 报文段少，如果使用 TCP 需要的额外开销相比之下不划算</p>
<p>DNS 用 UDP 传输的缺点：无法传输大的报文段</p>
<blockquote>
<p>在早期的 DNS 协议中，MTU &#x3D; 576，通过限制基于 UDP 的 DNS 报文段最大长度为 512 字节，避免生成的 IP 数据报大小超过 MTU</p>
<p>问题：512 字节是否包含 UDP 首部？即便不包含，512 + 20（UDP 报文段首部） + 20（IP 数据报首部） &#x3D; 552 &lt; 576，并不等于 576</p>
</blockquote>
<p>DNS 为什么使用 TCP </p>
<ul>
<li><p>DNS 报文段超过 MTU，会造成数据的分片和丢失，需要依靠 TCP 进行可靠传输；</p>
</li>
<li><p>随着 DNS 报文段增大，TCP 协议头以及三次握手带来的额外开销比例逐渐降低，不再是占据总传输数据大小的主要部分；</p>
</li>
</ul>
<h2 id="UDP-首部格式"><a href="#UDP-首部格式" class="headerlink" title="UDP 首部格式"></a>UDP 首部格式</h2><p>UDP 首部字段一共 8 个字节，包括：</p>
<ul>
<li>源端口号、目的端口号</li>
<li>长度：整个报文段的字节数（首部加数据）</li>
<li>校验和（checksum），2个字节</li>
</ul>
<p>实际使用时，添加了 12 个字节的伪首部字段。</p>
<p><img src="/2022/04/07/transport-layer/image-20220402105823002.png" alt="UDP 首部"></p>
<p>校验和（checksum）：用于差错检测，但是无法知道出错的字段是哪一个，也就是说检错的对象是整个报文段</p>
<p>校验和的发送和接收：</p>
<ul>
<li><p>发送方计算校验和：由于校验和大小是 2 个字节，即 16 比特，因此发送方将整个报文段看作 16bit 字的组合，对所有 16bit 字进行 求和、取反，求和时如果有溢出要回卷，得到 16 bit 大小的检验和字段</p>
<blockquote>
<p>所谓 “回卷” 就是当进行 16 比特的加法运算的时候，如果进位到 17位，则将第 17 位和后 16 位进行加法和运算。即当进位1，将其看作 0000 0000 0000 0001 ，并与低 16 位比特求和，若仍有进位，重复此回卷操作。</p>
</blockquote>
</li>
<li><p>接收方：将整个报文段求和（包括校验和字段），如果求和结果出现比特 0 ，则判断出现差错。</p>
<blockquote>
<p>有可能出现某个位，校验和出错（即 0 -&gt; 1 或者 1 -&gt; 0），且同时其他字的和在该位的结果也出错，这将导致报文段求和结果为0，无法检测出该错误。但是因为网络当中连续突发的错占绝大部分，这种跳跃性的出错概率很小，所以检验和的检错率还是比较高的。总之，在这里我们默认它足以完成差错检测任务</p>
</blockquote>
</li>
</ul>
<p><strong>UDP 报文段的大小限制</strong></p>
<blockquote>
<p>最大传输单元（Maximum Transmission Unit，MTU）是 <strong>链路层数据帧</strong> 中 <strong>有效载荷</strong> 的最大长度，一般以字节记。链路层数据帧中有效载荷就是 IP 数据报，所以 MTU 实际上就是 <strong>IP 数据报的长度限制</strong></p>
</blockquote>
<p>当我们发送的 UDP 报文段大于 MTU，则 IP 数据报也一定大于 MTU，这个时候发送方会采取分片（fragmentation），把 IP 数据报分成若干片，使每一片都 &lt;&#x3D; MTU。这导致接收方网络层需要进行数据报的重组。</p>
<p>如果在传输过程中，某个分片丢失，则发送端需要重传整个 IP 数据报，不能单独传递某个分片。TCP 会重传，但是 UDP 则不会，网络层是没有重传机制的。因此，当某个分片丢失，接收方无法重组 UDP 数据报，会直接丢弃。</p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP-首部格式"><a href="#TCP-首部格式" class="headerlink" title="TCP 首部格式"></a>TCP 首部格式</h3><p><img src="/2022/04/07/transport-layer/image-20220402105827330.png" alt="TCP 首部"></p>
<p><strong>序号、确认号</strong>：实现可靠数据传输服务。TCP是全双工的，主机既可以作为发送方又可以作为接收方，主机既有发送序号窗口又有接收序号窗口。</p>
<ul>
<li>序号 ：主机作为发送方时，用于对字节流进行编号，例如序号为 301，表示字节流第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li>
<li>确认号 ：主机作为接收方时，期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li>
</ul>
<p><strong>确认 ACK</strong>：当 ACK&#x3D;1 时确认号字段有效，否则无效。<strong>在连接建立后所有传送的报文段都必须把 ACK 置 1</strong>。</p>
<p><strong>同步 SYN</strong>：在连接建立时用来同步序号。当 SYN&#x3D;1，ACK&#x3D;0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN&#x3D;1，ACK&#x3D;1。</p>
<p><strong>终止 FIN</strong>：用来释放一个连接，当 FIN&#x3D;1 时，表示此报文段的<strong>发送方</strong>的数据已发送完毕，并要求释放连接。</p>
<p><strong>窗口</strong>：接收方愿意接收的字节数量，提供流量控制服务。</p>
<ul>
<li>指示发送方本接收方还有多少可用的缓存空间</li>
<li>全双工服务，TCP 连接两端都各自维护一个接收窗口</li>
</ul>
<p>数据偏移&#x2F;首部长度 ：通常，选项字段为空时，对应 TCP 报文段首部长度为 20 字节</p>
<p>选项：该字段可选且变长，可用于最大报文段长度（MSS）协商过程</p>
<h3 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h3><p><img src="/2022/04/07/transport-layer/image-20220402105830978-16493810455143.png" alt="TCP 三次握手"></p>
<p>假设 A 为客户端，B 为服务器端。</p>
<ul>
<li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li>
<li>A 向 B 发送连接请求报文（SYN 报文），SYN&#x3D;1，ACK&#x3D;0，并随机选择一个初始的序号 x。（如果 ISN，Initial Sequence Number 是固定的，攻击者很容易猜出后续的确认号，那么就可以伪装成这个 TCP 连接中的报文段）</li>
<li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文（SYNACK 报文），SYN&#x3D;1，ACK&#x3D;1，确认号为 x+1，同时也随机选择一个初始的序号 y。（不能单发 ACK，因为这样就是一个普通的确认报文，既发 SYN 又发 ACK，这样就知道是第二次握手的报文）</li>
<li>A 收到 B 的连接确认报文后，还要向 B 发出确认，SYN&#x3D;0，ACK&#x3D;1，确认号为 y+1，序号为 x+1。这与一个普通的 ACK 报文没有区别，也可携带客户到服务器的应用层数据。</li>
<li>B 收到 A 的确认后，连接建立。</li>
</ul>
<blockquote>
<p>半连接队列</p>
<p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN-RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下的 TCP 连接放在一个队列里，我们把这种队列称之为半连接队列。当然还有一个全连接队列，就是已经完成三次握手的连接。</p>
<p>服务器发送完 SYNACK 报文后，如果未收到客户确认，服务器会进行重传，等待一段时间仍未收到客户确认，进行第二次重传，如果重传次数超过规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s, 2s, 4s, 8s, …</p>
</blockquote>
<h4 id="进行三次握手的原因"><a href="#进行三次握手的原因" class="headerlink" title="进行三次握手的原因"></a>进行三次握手的原因</h4><p>主要有两个原因</p>
<ul>
<li>三次握手才能让双方均确认自己和对方的发送和接收能力都正常。传输数据的前提条件。<ul>
<li>第一次握手：服务端可以确认自己的接收能力和对方的发送能力正常；</li>
<li>第二次握手：客户端可以确认自己发送能力和接收能力正常，对方发送能力和接收能力正常；</li>
<li>第三次握手：服务器可以确认自己发送能力和接收能力正常，对方发送能力和接收能力正常；</li>
</ul>
</li>
</ul>
<p>服务端需要第三次握手来确认自己的发送能力和客户端的接收能力正常，。</p>
<blockquote>
<p>从另一个角度来解释第三次握手的意义。</p>
<p>第三次握手可以防止失效的连接请求到达服务器，让服务器错误打开连接。 </p>
<p>比如客户端 A 发出连接请求，可能因为网络阻塞原因，A 没有收到确认报文，于是在等待一个超时重传时间之后， A 再重传一次连接请求。连接成功，等待数据传输完毕后，就释放了连接。然后 A 发出的第一个连接请求等到连接释放以后的某个时间才到达服务端B，此时 B 误认为 A 又发出一次新的连接请求，于是就向 A 发出确认报文段。</p>
<p>如果不采用三次握手，只要 B 发出确认，就建立新的连接了，此时由于之前已经传输完了数据， A 不会响应 B 的确认报文且不发送数据，而 B 一直等待 A 发送数据，浪费资源。如果有第三次握手，只要客户端不响应服务器之后发送的对滞留连接请求的连接确认报文，不进行第三次握手，就不会再次打开连接。</p>
</blockquote>
<ul>
<li><p>告知对方自己的初始序号值，并且确认对方收到自己的初始序号。<strong>保证发送窗口和接收窗口在一开始是同步的</strong></p>
<ul>
<li>如果服务端没有收到发送端的 SYN 报文段（包含发送端的初始序号），发送端会重传 SYN 报文段，直到收到 ACK，表示服务端收到发送端的初始序号</li>
<li>如果发送端没有收到服务端 SYNACK 报文段（包含服务端端的初始序号），服务端会重传 SYNACK 报文段，直到收到 ACK</li>
</ul>
<p>  A 的初始序号即 A 的发送窗口一开始的 send_base，B 需要知道 A 的初始序号，因为它需要维护的接收窗口一开始的 rcv_base 应该等于 send_base，即<strong>保证发送窗口和接收窗口在一开始是同步的</strong></p>
</li>
</ul>
<p>三次握手已经实现了两个目的，不需要进行第四次握手</p>
<h4 id="SYN-洪范攻击"><a href="#SYN-洪范攻击" class="headerlink" title="SYN 洪范攻击"></a>SYN 洪范攻击</h4><p>在基本的三次握手过程中，服务器第一次收到客户端的 SYN 之后，就会生成 TCP 半连接（分配资源）。攻击者通过发送大量的 SYN 报文段，而不完成第三次握手，导致服务器不断分配无用的资源。</p>
<p>如果攻击者完成第三次握手，那么相当于他自己的资源换服务器的资源，并且实际上它的行为与正常客户一样</p>
<p>应对方法：Syn Cookie 技术</p>
<ol>
<li>服务器接收到一个 SYN 报文段时，不分配资源&#x2F;不生成一个半开连接</li>
<li>服务器随机生成一个序号，该序号由源、目的 IP 地址和端口号 hash 得到（即每个 SYN 报文段唯一对应一个 server_isn），并作为 SYNACK 的序号 y。</li>
<li>如果客户是合法的，它将返回一个 ACK 报文段，且确认号为 y+1，如果确认号-1 &#x3D; 源、目的ip地址和端口号的 hash 值，服务器认为该 ACK 对应于之前的一个 SYN 报文段，生成一个具有套接字的全开连接</li>
</ol>
<h4 id="三次握手中的丢包处理"><a href="#三次握手中的丢包处理" class="headerlink" title="三次握手中的丢包处理"></a>三次握手中的丢包处理</h4><p><strong>三次握手连接阶段，最后一次 ACK 包丢失，会发生什么？</strong></p>
<p>服务器发送完 SYNACK 报文后，如果未收到客户确认，服务器会进行重传，等待一段时间仍未收到客户确认，进行第二次重传，如果重传次数超过规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s, 2s, 4s, 8s, …</p>
<p>客户端认为这个连接已经建立，如果客户端向服务端发送数据，服务端将以 RST 包（Reset，标示复位，用于异常的关闭连接）响应。此时，客户端知道第三次握手失败。</p>
<p><strong>如果已经建立了连接，但是客户端出现故障了怎么办？</strong></p>
<p>服务端采用定时器 + 超时重试机制，尝试获取确认，直到最后会自动断开连接。</p>
<p>具体而言，TCP 设有一个保活计时器。服务器每收到一次客户端的数据，都会重新复位这个计时器，时间通常是设置为 2 小时。若 2 小时还没有收到客户端的任何数据（正常情况下，服务器不会主动向客户端发送数据），服务器就开始重试：每隔 75 分钟发送一个探测报文段，若一连发送 10 个探测报文后客户端依然没有回应，那么服务器就认为连接已经断开了。</p>
<h3 id="TCP-的四次挥手"><a href="#TCP-的四次挥手" class="headerlink" title="TCP 的四次挥手"></a>TCP 的四次挥手</h3><p><img src="/2022/04/07/transport-layer/image-20220402105835868.png" alt="TCP 四次挥手"></p>
<p>以下描述不讨论序号、确认号和 ACK，因为在连接建立之后，ACK&#x3D;1，序号和确认号按照规则自然生成。</p>
<ul>
<li>TCP 连接由客户率先释放。A 发送连接释放报文，FIN&#x3D;1。</li>
<li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li>
<li>当 B 不再需要连接时，发送连接释放报文，FIN&#x3D;1。</li>
<li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li>
<li>B 收到 A 的确认后释放连接。</li>
</ul>
<h4 id="为什么是四次挥手"><a href="#为什么是四次挥手" class="headerlink" title="为什么是四次挥手"></a>为什么是四次挥手</h4><p>客户端确定不再需要发送数据时，才会发送 FIN 报文，表示单方面的连接释放，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器确定不再需要发送数据，才会发送 FIN 报文。之后两边才会真正的断开连接。故需要四次挥手。</p>
<h4 id="TIME-WAIT-状态"><a href="#TIME-WAIT-状态" class="headerlink" title="TIME_WAIT 状态"></a>TIME_WAIT 状态</h4><p><strong>需要 TIME_WAIT 状态的原因</strong></p>
<p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p>
<ul>
<li><p>当服务器没有收到客户的 ACK 报文，保证客户端能收到服务端重传的 FIN 报文，然后客户端会重传 ACK 报文。</p>
<blockquote>
<p>MSL 是报文段在网络上存活的最长时间。客户端等待 2MSL 时间，即「客户端 ACK 报文 1MSL + 服务端 FIN 报文 1MSL」，就能够收到服务端重传的 FIN 报文，然后客户端重传一次 ACK 报文，并重新启动 2MSL 计时器。</p>
</blockquote>
</li>
<li><p>防止已失效的连接请求报文段出现在本连接中。A 在发送完最后一个 ACK 报文段后，再经过 2MSL，就可以使这个连接所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现旧的连接请求报文段。</p>
</li>
</ul>
<p><strong>处于 TIME_WAIT 状态的 socket 过多会产生什么后果，怎么处理</strong></p>
<p>场景：</p>
<p>服务端：按照一般的四次挥手过程，TIME_WAIT 是客户端的状态，服务端一般不主动关闭连接。但在部分场景中，当服务端处理完请求会主动关闭 TCP 连接。</p>
<p>在高并发短连接的 TCP 服务器上，当服务器处理完请求后立刻主动关闭连接。这个场景下会出现服务器大量 socket 处于 TIME_WAIT 状态。如果客户端的并发量持续很高，此时部分客户端就会显示连接不上。</p>
<ul>
<li>高并发会导致服务器在短时间内被占用大量端口，而端口的范围是 0~65535（16 比特），服务器因端口资源不足会拒绝为一部分客户服务。</li>
<li>短连接表示“业务处理+传输数据的时间远远小于 TIMEWAIT 等待的时间，是一个相对时长的概念。并不是 TCP 短连接和 TCP 长连接的意思</li>
</ul>
<p>长连接业务的服务不需要考虑 TIMEWAIT 状态，因为相较于服务消耗的时间，TIMEWAIT 的时间又不算什么了。并且，在实际业务场景中，一般长连接对应的业务的并发量并不会很高。</p>
<blockquote>
<p>HTTP 首部的 Connection 字段</p>
<p>Connection: keep-alive，开启HTTP持久连接（长连接），HTTP 1.1 默认值，服务端处理完请求后不会主动关闭 TCP 连接</p>
<p>Connection: close，关闭HTTP持久连接（短连接），HTTP 1.0 默认值，服务端处理完请求后会主动关闭 TCP 连接</p>
</blockquote>
<p>解决办法：</p>
<ul>
<li>服务器可以设置 SO_REUSEADDR 套接字选项。这个套接字选项通知内核，如果端口忙，但 TCP 状态处于TIME_WAIT，可以重用端口。</li>
<li>打开系统的 TIMEWAIT 重用和快速回收。编辑内核文件 &#x2F;etc&#x2F;sysctl.conf 文件，加入以下内容<ul>
<li>net.ipv4.tcp_tw_reuse &#x3D;1 表示开启重用。允许将 TIME-WAIT sockets 重新用于新的TCP连接，默认为0，表示关闭；</li>
<li>net.ipv4.tcp_tw_recycle &#x3D;1 表示开启TCP连接中 TIME-WAIT sockets 的快速回收，默认为0，表示关闭。</li>
</ul>
</li>
</ul>
<p><strong>TIME_WAIT 状态能够保证 TCP 传输的可靠性，当服务器大量 socket 处于 TIME_WAIT 状态，首先考虑的应该是分布式服务器，对抗高并发，而不是让一台服务器用自己的方法关闭处于 TIME_WAIT 状态的 socket</strong></p>
<h3 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h3><p>流量控制：控制发送方发送速率，保证接收方来得及接收。</p>
<p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而控制发送方的发送速率。</p>
<h3 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h3><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。</p>
<p>流量控制：接收方接收能力有限，不考虑整个网络；</p>
<p>拥塞控制：网络已经拥塞，要降低接入网络的发送方的传输速率，减少丢包</p>
<p><img src="/2022/04/07/transport-layer/1646125033652-f2cee9eb-09ce-43b9-87d1-2068cb65824d.jpeg" alt="拥塞控制比较"></p>
<h4 id="TCP-拥塞控制算法"><a href="#TCP-拥塞控制算法" class="headerlink" title="TCP 拥塞控制算法"></a>TCP 拥塞控制算法</h4><p>发送方维护变量：拥塞窗口 cwnd（congestion window），以 cwnd 作为发送窗口大小。一开始，使用慢开始算法，当 cwnd 达到 ssthresh 时，改用拥塞避免算法</p>
<ul>
<li><p>慢开始 （slow-start）：拥塞窗口按<strong>指数</strong>规律缓慢增长。即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加倍</p>
</li>
<li><p>拥塞避免 （congestion avoidance）：拥塞窗口按<strong>线性</strong>规律缓慢增长，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加1。</p>
</li>
<li><p>快重传 （fast retransmit）：我们可以剔除一些不必要的拥塞报文，提高网络吞吐量。</p>
<p>  比如接收方在收到一个失序的报文段后就立即发出重复确认，而不要等到自己发送数据时捎带确认。</p>
<blockquote>
<p>流水线可靠数据传输协议是这样做的，但是由于 TCP 是全双工的，因此接收端可以同时传输数据分组（数据和序号）和 ACK 分组（ACK 和确认号）。于是接收端可以选择是否要等上层数据来才反馈数据和ACK</p>
</blockquote>
<p>  发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</p>
</li>
<li><p>快速恢复 （fast recovery）：主要是配合快重传。当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把 ssthresh 减半，但接下来并不执行慢开始算法，因为如果网络出现拥塞的话就不会收到好几个重复的确认，收到三个重复确认说明网络状况还可以。<br>  <img src="/2022/04/07/transport-layer/1648560147086-bf65391a-049e-44a9-b2bb-ccb08f80e83e.png" alt="cwnd 随传输轮次的变化过程。">图中，传输轮次变化 1 表示经过一个往返时间 RTT（1 轮即1报文段的一个来回，例如发送方发分组到接收方，接收方发 ACK 到发送方</p>
</li>
</ul>
<h3 id="TCP-可靠数据传输"><a href="#TCP-可靠数据传输" class="headerlink" title="TCP 可靠数据传输"></a>TCP 可靠数据传输</h3><p><strong>基本机制</strong>：</p>
<ol>
<li>检验和</li>
<li>序号和确认号：根据确认号，发送方判断是否重传，根据序号，接收方判断是否按序接收</li>
<li>滑动窗口：既用于实现可靠数据传输，又可以通过改变窗口大小实现流量控制和拥塞控制</li>
<li>超时重传：超时重传是指发送出去的数据包到接收到确认包之间的时间 RTT，如果超过了这个时间会被<br> 认为是丢包了，需要重传。最大超时时间是动态计算的。</li>
<li>流量控制：接收方接收能力有限（接收缓冲区不足）</li>
<li>拥塞控制：网络已经拥塞，要降低接入网络的发送方的传输速率，减少丢包</li>
</ol>
<p><strong>具体实现方式</strong>：GBN、SR</p>
<h1 id="可靠数据传输-x2F-rdt-协议"><a href="#可靠数据传输-x2F-rdt-协议" class="headerlink" title="可靠数据传输&#x2F;rdt 协议"></a>可靠数据传输&#x2F;rdt 协议</h1><h2 id="rdt-2-x-协议"><a href="#rdt-2-x-协议" class="headerlink" title="rdt 2.x 协议"></a>rdt 2.x 协议</h2><p><strong>信道有差错、无丢包。</strong></p>
<h3 id="rdt-2-0-协议"><a href="#rdt-2-0-协议" class="headerlink" title="rdt 2.0 协议"></a>rdt 2.0 协议</h3><img src="/2022/04/07/transport-layer/1647264249043-2355ea05-3c85-48db-831d-d71bd6f9f480-16493429072551-16493811925277.png" alt="rdt2.0 发送端" style="zoom: 80%;">

<img src="/2022/04/07/transport-layer/1647264538997-4e356760-a14c-4d0e-90ac-372dedcf20a1-16493429072612-16493812001439.png" alt="rdt2.0 接收端" style="zoom: 80%;">

<p><strong>发送端</strong>：发送数据后，处于等待 ACK&#x2F;NAK 的状态，若收到 NAK，<strong>重传报文并且继续等待</strong>；若收到 ACK，回到初始状态，等待发送数据。</p>
<p><strong>接收端</strong>：若接收到的数据有损（根据校验和判断），发送 NAK 给发送端；若接收到的数据无损，传送至上层并发送 ACK 给发送端。</p>
<p><strong>存在的问题</strong>：对于发送端，收到的 ACK&#x2F;NAK 可能是有损的，而状态图并没有考虑到这种情况。</p>
<p><strong>情况分析</strong>：当发送端收到有损的 ACK&#x2F;NAK 报文，它无法判断发送的数据是否被接收方正确接收（因为可能是 NAK 报文受损，也可能是 ACK 报文受损）。</p>
<p><strong>解决方法</strong>：当发送端收到有损的 ACK&#x2F;NAK 报文，发送端同样重传报文并且继续等待。<strong>为了让接收方知道这是一次旧报文的重传还是受损报文的重传</strong>（对应于发送端收到无损 NAK），发送端需要给报文添加<strong>序号字段</strong>。对于停等协议，序号只需要 0 和 1 —— rdt 2.1 协议</p>
<h3 id="rdt-2-1-协议"><a href="#rdt-2-1-协议" class="headerlink" title="rdt 2.1 协议"></a>rdt 2.1 协议</h3><p><strong>为了让接收方知道这是一次旧报文的重传还是受损报文的重传</strong>（对应于发送端收到无损 NAK），发送端需要给报文添加<strong>序号字段</strong></p>
<img src="/2022/04/07/transport-layer/1647265748305-e77c3ba4-856e-45a9-be13-3a1aff420614.png" alt="rdt2.1 发送端" style="zoom: 80%;">

<img src="/2022/04/07/transport-layer/1647265771972-bbae444e-4cec-4133-9431-08b7730102c3.png" alt="rdt2.1 接收端" style="zoom: 80%;">

<p><strong>发送端</strong>：</p>
<p>一开始，发送序号为 0 的报文，如果收到的 ACK&#x2F;NAK 报文受损，重发序号为 0 的报文并且等待；</p>
<p>如果收到无损 NAK 报文，重发序号为 0 的报文并且等待；如果收到无损 ACK 报文，则等待发送序号为 1 的报文。</p>
<p>发送序号为 1 的报文，……，</p>
<p><strong>接收端</strong>：</p>
<p>一开始，等待序号为 0 的报文，若接收到的数据有损，发送 NAK 给发送端；若接收到的数据无损，且序号为 0，说明正确接收，传送至上层并发送 ACK 给发送端；若接收到的数据无损，且序号为 1，说明接收到了之前上一个报文的重传（上一个报文的序号是 1），丢弃报文并发送 ACK 给发送端，并且等待序号为 0 的报文。</p>
<p>等待序号为 1 的报文，……，</p>
<h3 id="rdt-2-2-协议"><a href="#rdt-2-2-协议" class="headerlink" title="rdt 2.2 协议"></a>rdt 2.2 协议</h3><p><strong>基于 rdt 2.1 协议，只使用 ACK，不使用 NAK。</strong></p>
<p><strong>对于发送端来说，由于现在只会收到 ACK，因此，收到无损 ACK 可能对应 rdt2.1 协议中的两种情况：</strong>收到无损 ACK 报文和收到无损 NAK 报文。</p>
<p>为了让发送端知道现在应该重传序号为 0 的报文并且等待，还是等待发送序号为 1 的报文，接收端也需要为 ACK 报文添加序号，该序号表示 <strong>确认号</strong>，即<strong>接收端已经正确接收到的报文序号</strong>，而<strong>接收端期待接收到的报文序号</strong>应该是：(确认号+1) % N，在停等协议中，N &#x3D; 2。发送端知道了接收端期待接收的报文序号，也就知道了要重传还是要发新报文。</p>
<img src="/2022/04/07/transport-layer/1647267039580-ffcd28d7-2f6e-4612-92e2-d64d24c10057-16493429072623.png" alt="rdt2.2 接收端" style="zoom:80%;">

<h3 id="rdt-3-0-协议"><a href="#rdt-3-0-协议" class="headerlink" title="rdt 3.0 协议"></a>rdt 3.0 协议</h3><p><strong>信道有差错和丢包。</strong>丢包的应对就是重传，仅仅只是让状态图内容更多了。</p>
<p><strong>丢包的解决方法</strong>：在<strong>发送方</strong>使用 <strong>基于时间的重传机制</strong>，<strong>每次发送一个分组就启动一个定时器</strong>，经过一定时间后若还未接收到回传的分组，则定时器响应中断，重传分组。</p>
<p>基于 rdt 2.2 协议，并加入定时检测丢包然后重传的功能，得到如下 rdt 3.0 协议的状态图。其接收端状态图与 rdt 2.2 协议相同。</p>
<img src="/2022/04/07/transport-layer/1647267415807-5656ac65-9ab6-495a-ad99-43d7d2e60e16.png" alt="rdt3.0 发送端" style="zoom:80%;">

<img src="/2022/04/07/transport-layer/1647267039580-ffcd28d7-2f6e-4612-92e2-d64d24c10057.png" alt="rdt3.0 接收端" style="zoom:80%;">

<h2 id="流水线可靠数据传输协议"><a href="#流水线可靠数据传输协议" class="headerlink" title="流水线可靠数据传输协议"></a>流水线可靠数据传输协议</h2><h3 id="回退-N-步（Go-Back-N，GBN）"><a href="#回退-N-步（Go-Back-N，GBN）" class="headerlink" title="回退 N 步（Go Back N，GBN）"></a>回退 N 步（Go Back N，GBN）</h3><h4 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h4><p><strong>发送方要响应三种事件</strong>：</p>
<ol>
<li>上层的调用。当上层调用 rdt_send() 要发送数据时，发送方首先检查发送窗口是否已满，即是否有 N 个「已发送但未确认的分组」，如果窗口未满，则产生一个分组并发送，如果窗口已满，则告知上层窗口已满。（实际使用中，可以缓存这些分组，分组缓存的位置在发送窗口后面；也可以通过同步机制，如信号量，让上层只在窗口未满时才调用 rdt_send()）</li>
<li>收到 ACK。接收方所发送 ACK 分组的序号 x 表示接收方已经正确接收序号 &lt;&#x3D; x 的分组</li>
</ol>
<p>根据 ACK 分组的序号更新 base &#x3D; x + 1（窗口移动 1 单位），由于接收方采用累计确认，因此 x 和 base 是不断加 1 递增的。如果窗口移动了并且有在窗口内的未发送分组（之前缓存的分组），发送它们。</p>
<ol>
<li>超时事件。发送方维护一个定时器，它是最早的已发送但未被确认的分组的定时器。若超时，重传所有「已发送但未确认的分组」。</li>
</ol>
<p>定时器的维护方式：</p>
<ol>
<li><ol>
<li>当发送方收到 ACK，仍有「已发送但未确认的分组」，重启定时器</li>
<li>当发送方收到 ACK，没有「已发送但未确认的分组」，关闭定时器</li>
<li>超时，重启定时器</li>
</ol>
</li>
</ol>
<p><strong>发送窗口</strong>：</p>
<ul>
<li>[base, nextseqnum-1] 已发送未被确认</li>
<li>[nextseqnum, base+N-1] 可用还未发送</li>
</ul>
<p>nextseqnum 表示发送方下一个可发的分组的序号</p>
<h4 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h4><p>如果一个序号为 n 的分组被正确接收，且按序（即上一次交付给上层的分组序号是 n-1），则接收方交付数据到上层，并发送 ACK</p>
<p>其他情况，接收方丢弃分组，并为最近按序接收的分组重新发送 ACK</p>
<p><strong>下一个按序接收的分组的序号</strong>：</p>
<p>expectedseqnum 表示下一个按序接收的分组的序号，表明接收方已正确接收到序号 &lt; expectedseqnum 的所有分组</p>
<p>当接收到序号为 n 的分组，只需要判断 n 是否等于 expectedseqnum 即可。</p>
<p>按序接收，ACK 分组的序号&#x3D; expectedseqnum，然后更新++expectedseqnum</p>
<p>不按序接收，发送上一个ACK 分组，其序号为expectedseqnum-1</p>
<p>发送方的 base 与 接收方的 expectedseqnum 同步变化。</p>
<h3 id="选择重传（SR）"><a href="#选择重传（SR）" class="headerlink" title="选择重传（SR）"></a>选择重传（SR）</h3><p>回退 N 步的方案中，接收方不需要缓存失序分组，容易实现。但是由于不缓存失序分组，会导致更多的重传。</p>
<p>选择重传通过让发送方仅重传那些它怀疑在接收方出错的分组而避免不必要的重传。这种个别的、按需的重传方式要求<strong>逐个地确认</strong>正确接收的分组。（回退 N 步是累计确认）</p>
<h4 id="发送方-1"><a href="#发送方-1" class="headerlink" title="发送方"></a>发送方</h4><p><strong>发送方要响应三种事件</strong>：</p>
<ol>
<li><p>上层的调用。当从上层收到数据后，发送方检查下一个可用序号，如果序号位于发送窗口内，将数据打包发送，否则，类似地，要么将数据缓存，要么用同步机制控制上层调用的时机。</p>
</li>
<li><p>收到 ACK</p>
</li>
<li><ol>
<li>ACK 分组的序号在发送窗口内，将这个序号的分组标记为已接收。</li>
<li>如果该序号为 send_base，则窗口基序号向前移动到具有最小序号的未确认分组处。</li>
<li>如果窗口移动了，并且有在窗口内的未发送分组（之前缓存的分组），发送它们</li>
</ol>
</li>
<li><p>超时事件。发送方为<strong>每个分组</strong>维护一个逻辑定时器，对应分组的定时器超时只需要重传该分组。可以使用单个硬件定时器模拟多个逻辑定时器</p>
</li>
</ol>
<h4 id="接收方-1"><a href="#接收方-1" class="headerlink" title="接收方"></a>接收方</h4><p><strong>接收方要响应三种事件</strong>：</p>
<ol>
<li><p>序号在接收窗口内的分组被正确接收</p>
</li>
<li><ol>
<li>如果该分组以前没收到过，则缓存该分组。</li>
<li>如果该分组的序号为 rcv_base，则该分组以及 rcv_base 往后缓存的连续分组被交付上层，并移动 rcv_base 和接收窗口。</li>
<li>发送 ACK，ACK 的序号是接收到的分组的序号</li>
</ol>
</li>
<li><p>序号在 [rcv_base-N, rcv_base-1] 内的分组被正确接收，发送 ACK，即使这个分组之前已经被接收方正确接收</p>
</li>
<li><p>其他情况，丢弃分组</p>
</li>
</ol>
<h5 id="发送窗口和接收窗口不同步的问题，即-send-base-x3D-rcv-base"><a href="#发送窗口和接收窗口不同步的问题，即-send-base-x3D-rcv-base" class="headerlink" title="发送窗口和接收窗口不同步的问题，即 send_base !&#x3D; rcv_base"></a>发送窗口和接收窗口不同步的问题，即 send_base !&#x3D; rcv_base</h5><p><strong>原因</strong></p>
<p>接收方根据 数据分组 序号信息移动接收窗口，并发送 ACK 分组。发送方根据 ACK 分组的序号移动发送窗口，如果 ACK 分组错误或者丢失，则发送发送窗口无法正确被标记。</p>
<p><strong>发送窗口的滞后</strong></p>
<p>接收窗口先移动，发送窗口只能与接收窗口同步，或者滞后。</p>
<p>至多滞后 N 个序号，这是因为接收窗口最多一次移动 N 步，而发送窗口可能由于序号为 rcv_base 的 ACK 分组丢失或者出错，连一步都移动不了</p>
<p><strong>示例</strong></p>
<p>发送方发送 0 到 4 号分组，传输到接收方</p>
<p><img src="/2022/04/07/transport-layer/1648559215136-0532653f-1536-43e4-8f9a-a65e32c8b7dd-16493429072624.png" alt="(a)"></p>
<p>接收方接收，并返回 0 到 4 号 ACK，接收窗口向前滑动5个位置</p>
<p><img src="/2022/04/07/transport-layer/1648559215290-9e8dccff-ae82-435b-9ef7-a01ce588bee0-16493429072625.png" alt="(b)"></p>
<p>0 到 4 号 ACK 传输到达发送方，但是 0 号ACK丢失，发送方接收 1 到 4 号 ACK，并记录 1 到 4 号 分组已收到确认，但是发送窗口不能向前移动。</p>
<p>一段时间后，0 号分组计时器超时，重传 0 号分组，传输到达接收方，接收方接收该分组并反馈 0 号 ACK，若发送方能正确接收该 ACK，则发送窗口也移动到 send_base &#x3D; 5</p>
<p>有限序号范围问题：</p>
<p>当窗口长度为N，实际上是这样的，[0,N-1][N,2N-1]…长度为N的窗口滑动，但是索引值却并非在0~N-1取值，索引值%N&#x3D;序号。如果窗口长度过大，接收方可能无法判断分组是新分组还是旧分组的重传。</p>
<img src="/2022/04/07/transport-layer/1641715373288-1bffa27c-c45d-44ee-a971-9f57bb9aa4c4-16493429072626.png" alt="img" style="zoom: 67%;">

<p><img src="/2022/04/07/transport-layer/1641715247816-3e91619a-488b-4b8e-89e1-d512dd2fcaea-16493429072627.png" alt="img"></p>
<p>此时接收方窗口的序号是3、0、1，而接收到序号0的分组，无法判断是应该在新的 0 序号对应的分组还是上个窗口的0重传</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>应用层</title>
    <url>/2022/04/07/app-layer/</url>
    <content><![CDATA[<h1 id="网络分层结构"><a href="#网络分层结构" class="headerlink" title="网络分层结构"></a>网络分层结构</h1><p><strong>TCP&#x2F;IP 五层模型：应用层、传输层、网络层、数据链路层、物理层</strong></p>
<span id="more"></span>
<p>应用层：为应用程序提供服务，数据单位称为报文</p>
<ul>
<li>HTTP</li>
<li>DNS（Domain Name System），将域名转化为 IP 地址</li>
<li>FTP（File Transfer Protocol），文件传输协议</li>
<li>SMTP（Simple Mail Transfer Protocol）</li>
</ul>
<p>传输层：为主机间进程通信提供服务，数据单位称为报文段</p>
<ul>
<li>TCP（Transmission Control Protocol）</li>
<li>UDP（User Datagram Protocol）</li>
</ul>
<p>网络层：为主机之间的逻辑通信（IP寻址）提供服务，选择合适的路由和交换结点，数据单位称为数据报</p>
<ul>
<li>IP（Internet Protocol），定义了 IP 数据报的字段以及端系统和路由器如何处理 IP 数据报</li>
<li>路由选择协议：IP 数据报根据什么样的路由从源传输到目的</li>
</ul>
<p>链路层：将 IP 数据报组装成帧，数据单位称为帧</p>
<blockquote>
<p>封装：一个应用层报文向下层传输时被附加下层的首部字段，每层的数据包含两部分，即本层首部字段和有效载荷（上一层的数据）</p>
<p>封装的目的：对于每一层的用户来说，只需要考虑本层的协议。</p>
</blockquote>
<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>DNS（Domain Name System，域名系统）</p>
<ul>
<li>由分层的 DNS 服务器实现的分布式数据库，包括根域名服务器、顶级域名服务器（Top-Level Domain，TLD）和权威域名服务器</li>
<li>用于查询该分布式数据库的协议</li>
</ul>
<blockquote>
<p>根域名服务器：记录了顶级域名服务器的 IP 地址</p>
<p>顶级域名服务器：例如 .com 服务器，存放了 *.com 服务器的 IP 地址</p>
<p>权威域名服务器：例如 baidu.com，存放了 *.baidu.com 服务器的 IP 地址</p>
<p>DNS 通常运行在 UDP 之上，也可以运行在 TCP 之上，统一使用 53 号端口（DNS 服务器开 53 号端口）</p>
</blockquote>
<h3 id="DNS-查询过程"><a href="#DNS-查询过程" class="headerlink" title="DNS 查询过程"></a>DNS 查询过程</h3><p><strong>递归查询</strong></p>
<p>当 DNS 服务器接收到请求，如果 DNS 服务器本地没有存储查询的 DNS 信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。</p>
<p><strong>迭代查询</strong></p>
<p>DNS 服务器若没有可以响应的结果，会向客户机提供其他能够解析查询请求的 DNS 服务器地址，客户机根据此地址，向另一台 DNS 服务器提交请求， 不断重复直到得到查询的结果为止。</p>
<p><img src="/2022/04/07/app-layer/image-20220402105631355.png" alt="DNS 查询过程"></p>
<p>假设主机 cis.poly.edu 想知道主机 gain.cs.umass.edu 的 IP 地址，在 DNS 查询过程中，主机与本地 DNS 服务器的查询方式是递归查询，本地 DNS 服务器与各级 DNS 服务器的查询方式是迭代查询。</p>
<p>在上图的查询过程中，权威域名服务器的主机名为 dns.umass.edu，表示该服务器记录了所有域名为 *.umass.edu 的服务器的 IP 地址</p>
<hr>
<p><strong>问题</strong></p>
<ol>
<li><p>权威域名服务器 dns.umass.edu 很可能无法记录所有域名为 *.umass.edu 的服务器的 IP 地址，那么实际中权威域名是否与更低级的 DNS 服务器进行了递归查询？</p>
</li>
<li><p>DNS 协议中提到的地址是否为 IP 地址？</p>
</li>
</ol>
<hr>
<h3 id="基于-DNS-缓存的-DNS-查询过程"><a href="#基于-DNS-缓存的-DNS-查询过程" class="headerlink" title="基于 DNS 缓存的 DNS 查询过程"></a>基于 DNS 缓存的 DNS 查询过程</h3><ul>
<li><p>搜索本机 DNS 缓存</p>
<ul>
<li><p>浏览器 DNS 缓存</p>
</li>
<li><p>操作系统中的 DNS 缓存和 hosts 文件</p>
</li>
</ul>
</li>
<li><p>若本机 DNS 缓存未命中，向本地 DNS 服务器发起查询，若本地 DNS 服务器没有查询的 DNS 信息，向各级 DNS 服务器发起迭代查询</p>
</li>
<li><p>本地 DNS 服务器得到 IP 地址，并缓存（域名, IP 地址），将得到的 IP 地址返回本机</p>
</li>
<li><p>操作系统和浏览器得到 IP 地址，并缓存（域名, IP 地址）</p>
</li>
</ul>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="HTTP-1"><a href="#HTTP-1" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP 允许传输任意类型的数据。传输的类型由 Content-Type 加以标记。</p>
<p>无状态。对于客户端每次发送的请求，服务器都认为是一个新的请求，上一次会话和下一次会话之间没有联系。</p>
<p>支持客户端&#x2F;服务器模式</p>
<p><strong>HTTP 常用的请求方法</strong></p>
<p>PUT：上传文件，向服务器添加数据，可以看作增</p>
<p>DELETE：删除文件</p>
<p>POST：传输数据，向服务器提交数据，对服务器数据进行更新。</p>
<p>GET：获取资源，查询服务器资源</p>
<h4 id="HTTP-报文格式"><a href="#HTTP-报文格式" class="headerlink" title="HTTP 报文格式"></a>HTTP 报文格式</h4><p>HTTP 请求由请求行、请求头部、空行和请求体四个部分组成</p>
<ul>
<li>请求行：包括请求方法，访问的资源 URL，使用的 HTTP 版本。</li>
<li>请求头：格式为“属性名:属性值”，服务端根据请求头获取客户端的信息，主要有 cookie、host、connection、accept-language、accept-encoding、user-agent。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 请求报文示例</span><br><span class="line">POST /xxx HTTP/1.1 请求行</span><br><span class="line"></span><br><span class="line">Accept:image/gif.image/jpeg, 请求头</span><br><span class="line">Accept-Language:zh-cn</span><br><span class="line">Connection:Keep-Alive</span><br><span class="line">Host:localhost</span><br><span class="line">User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)</span><br><span class="line">Accept-Encoding:gzip,deflate</span><br><span class="line"></span><br><span class="line">username=dabin 请求体</span><br></pre></td></tr></table></figure>

<p>HTTP 响应也由四个部分组成，分别是：状态行、响应头、空行和响应体</p>
<ul>
<li>状态行：协议版本，状态码及状态描述。</li>
<li>响应头：响应头字段主要有 connection、content-type、content-encoding、content-length、set-cookie、Last-Modified、Cache-Control、Expires。</li>
<li>响应体：服务器返回给客户端的内容。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 响应报文示例</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">Server:Apache Tomcat/5.0.12 响应头</span><br><span class="line">Date:Mon,6Oct2003 13:23:42 GMT</span><br><span class="line">Content-Length:112</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;响应体&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>1XX</td>
<td>Informational（信息性状态码）</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td>2XX</td>
<td>Success（成功）</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3XX</td>
<td>Redirection（重定向）</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td>4XX</td>
<td>Redirection（重定向）</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5XX</td>
<td>Server Error（服务器错误）</td>
<td>服务器处理请求出错</td>
</tr>
</tbody></table>
<p>100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</p>
<p>200 OK</p>
<h4 id="HTTP1-0-和-HTTP1-1-的区别"><a href="#HTTP1-0-和-HTTP1-1-的区别" class="headerlink" title="HTTP1.0 和 HTTP1.1 的区别"></a>HTTP1.0 和 HTTP1.1 的区别</h4><ul>
<li>长连接：HTTP1.0 默认使用短连接，每次请求都需要建立新的TCP连接，连接不能复用。HTTP1.1 支持长连接，复用 TCP 连接，允许客户端通过同一连接发送多个请求。不过，这个优化策略也存在问题，当一个队头的请求不能收到响应的资源时，它将会阻塞后面的请求。这就是“队头阻塞”问题。</li>
<li>断点续传：HTTP1.0 不支持断点续传。HTTP1.1 新增了 range 字段，用来指定数据字节位置，支持断点续传。</li>
<li>错误状态响应码：在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突、410（Gone）表示服务器上的某个资源被永久性的删除。</li>
<li>Host 信息：在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名。到了 HTTP1.1 时代，虚拟主机技术发展迅速，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址，故 HTTP1.1 增加了 HOST 信息，用于区分同一 IP 的多个虚拟主机。</li>
</ul>
<h4 id="HTTP1-1-和-HTTP2-0-的区别"><a href="#HTTP1-1-和-HTTP2-0-的区别" class="headerlink" title="HTTP1.1 和 HTTP2.0 的区别"></a>HTTP1.1 和 HTTP2.0 的区别</h4><ul>
<li>新的二进制格式：HTTP1.1 基于文本格式传输数据；HTTP2.0 采用二进制格式传输数据，解析更高效。</li>
<li>多路复用：在一个连接里，允许同时发送多个请求或响应，并且这些请求或响应能够并行的传输而不被阻塞，避免 HTTP1.1 出现的”队头堵塞”问题。</li>
<li>头部压缩，HTTP1.1 的 header 带有大量信息，而且每次都要重复发送；HTTP2.0 把 header 从数据中分离，并封装成头帧和数据帧，使用特定算法压缩头帧，有效减少头信息大小。并且HTTP2.0 在客户端和服务器端记录了之前发送的键值对，对于相同的数据，不会重复发送。比如请求 a 发送了所有的头信息字段，请求 b 则只需要发送差异数据，这样可以减少冗余数据，降低开销。</li>
<li>服务端推送：HTTP2.0 <strong>允许服务器向客户端推送资源</strong>，无需客户端发送请求到服务器获取。</li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>HTTP 是无状态的，然而一个站点通常希望能够识别用户。</p>
<p>当用户<strong>第一次访问</strong>并登陆一个网站的时候，会经历以下4个步骤：</p>
<ul>
<li><p>客户端发送一个 HTTP 请求到服务器</p>
</li>
<li><p>服务器用一个 HTTP Response 响应客户端，响应报文首部包含 Set-cookie 字段，表示服务器为客户端分配了一个 cookie ，服务器用 cookie 值来识别用户</p>
</li>
<li><p>客户端保存 cookie ，之后向服务器发送 HTTP 请求时，请求的首部会包含一个 cookie 字段，而服务器的响应不需要再包含 Set-cookie 字段</p>
</li>
</ul>
<blockquote>
<p>Set-cookie 和 cookie 字段有多个属性，主要包括：</p>
<p>NAME&#x3D;VALUE    要保存的 Key&#x2F;Value</p>
<p>Expires    过期时间</p>
<p>Domain    生成该 cookie 的域名，如 domain&#x3D;”<a href="http://www.baiducom&quot;/">www.baiducom&quot;</a></p>
</blockquote>
<p><strong>Cookie 和 Session 的区别？</strong></p>
<ul>
<li>作用范围不同，Cookie 保存在客户端，Session 保存在服务器端。</li>
<li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效</li>
<li>隐私策略不同，Cookie 存储在客户端，容易被窃取；Session 存储在服务端，安全性相对 Cookie 要好一些</li>
<li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K；对于 Session 来说存储没有上限，但出于对服务器的性能考虑，Session 内不要存放过多的数据，并且需要设置 Session 删除机制。</li>
</ul>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>HTTP 有以下安全性问题：</p>
<ul>
<li>使用明文进行通信，内容可能会被窃听；</li>
<li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li>
<li>无法证明报文的完整性，报文有可能遭篡改。</li>
</ul>
<p>通过使用 SSL，HTTPS 能够加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p>
<blockquote>
<p>HTTPS 使用 443 号端口</p>
<p>由于需要先进行认证、密钥协商，导致消耗时空资源</p>
</blockquote>
<h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p><strong>对称密钥加密</strong>（Symmetric-Key Encryption)，加密和解密使用同一密钥</p>
<ul>
<li>优点：运算速度快</li>
<li>缺点：密钥需要传输，而传输环境是不安全的</li>
</ul>
<p>非对称密钥加密，又称公钥加密（Public-Key Encryption），加密和解密使用不同的密钥 </p>
<ul>
<li>优点：保密性好（只需要传输公钥，公钥被任何人获取都可以，因为私钥只有一个人知道，只有他能解密）</li>
<li>缺点：运算速度慢</li>
</ul>
<h4 id="HTTPS-的加密方式"><a href="#HTTPS-的加密方式" class="headerlink" title="HTTPS 的加密方式"></a>HTTPS 的加密方式</h4><p>HTTPS 采用<strong>混合的加密方式</strong>，服务端先告知客户端自己的公钥。然后客户端用公钥加密自己的对称密钥，服务端用私钥解得对称密钥，然后用对称密钥加密传输</p>
<ul>
<li>使用非对称密钥加密方式，传输对称密钥，保证安全性</li>
<li>使用对称密钥加密方式进行通信，保证效率</li>
</ul>
<p><img src="/2022/04/07/app-layer/image-20220402105707967.png" alt="HTTPS 密钥传输过程"></p>
<h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><blockquote>
<p>非对称密钥加密方式存在的安全性问题</p>
<p>客户端 C 和服务器 S 想要使用 SSL&#x2F;TLS 通信，由上述 SSL&#x2F;TLS 通信原理，C 需要先知道 S 的公钥，而 S 公钥的唯一获取途径，就是把 S 公钥在网络信道中传输。</p>
<p>由于 S 公钥明文在信道中传输，那么很有可能存在一个攻击者 A，发送给 C 一个诈包，假装是 S 公钥，其实是诱饵服务器（AS）的公钥。</p>
<p>当 C 收获了 AS 的公钥（却以为是 S 的公钥），C 后续就会使用 AS 公钥对数据进行加密，并在公开信道传输，那么 A 将捕获这些加密包，用 AS 的私钥解密，就截获了 C 本要给 S 发送的内容，而 C 和 S 二人全然不知。<br>S 公钥即使做加密，也难以避免这种信任性问题，C 被 AS 拐跑了！</p>
</blockquote>
<p>简而言之，<strong>客户端不能判断公钥是攻击者发出的还是服务器发出的，即不能判断公钥是否安全。</strong></p>
<p><strong>通过在传输密钥之前进行认证，确保获取的是信任机构的公钥。</strong></p>
<p>认证过程</p>
<p>服务端发送证书（包括证书内容和证书签名算法）和签名</p>
<ul>
<li>使用证书签名算法（hash 算法）对证书内容进行 hash 运算。（证书内容是一串数字）</li>
<li>对 hash 后的值用私钥加密（私钥来自于 CA 机构），得到签名。</li>
<li>将证书内容和签名一同发送</li>
</ul>
<p>客户端获得证书和签名</p>
<ul>
<li>用 CA 机构的公钥对签名解密（由于是浏览器信任的机构，所以浏览器会保存它的公钥）。</li>
<li>用证书里的签名算法对证书内容进行 hash 运算。</li>
<li>比较解密后的签名和对证书内容做 hash 运算后得到的 hash 值，相等则表明证书可信。</li>
</ul>
<p><img src="/2022/04/07/app-layer/image-20220402105718405.png" alt="HTTPS 认证过程"></p>
<hr>
<p>证书内容实际上就是浏览器的公钥</p>
<p>思考：为什么这样认证能保证公钥是可信的？</p>
<p>浏览器保存了 CA 机构的公钥，只要证书中的 hash 算法不是 CA 机构的，或者不是用 CA 机构的私钥加密证书，一定不会取等。当且仅当 hash 算法和私钥都由 CA 机构提供，才会取等。</p>
<hr>
<h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><p>动态主机配置协议（Dynamic Host Configuration Protocol，DHCP）提供了即插即用的连网方式，用户不再需要手动配置 IP 地址等信息。</p>
<p>DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、默认网关 IP 地址和本地 DNS 服务器地址。</p>
<p><img src="/2022/04/07/app-layer/image-20220402110655433.png"></p>
<p>DHCP 工作过程如下：</p>
<ol>
<li>客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。广播：指目的 IP 地址为：255.255.255.255</li>
<li>DHCP 服务器收到 Discover 报文之后，广播 Offer 报文给客户端（广播，因为 Discover 报文并不包含客户端的有效源地址信息），该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。</li>
<li>如果客户端选择了某个 DHCP 服务器提供的信息，广播 Request 报文给该 DHCP 服务器。（Request 报文中的 DHCP server ID 字段用来让接收到 Request 报文的 DHCP 服务器判断是否需要自己提供服务）</li>
<li>DHCP 服务器广播 ACK 报文给客户端，表示客户端此时可以使用提供给它的信息</li>
</ol>
<p><img src="/2022/04/07/app-layer/image-20220402105738824.png" alt="DHCP IP 配置过程"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>死锁</title>
    <url>/2022/04/02/deadlock/</url>
    <content><![CDATA[<p>产生死锁的必要（不充分）条件、解决死锁的方法</p>
<span id="more"></span>

<h1 id="产生死锁的四个必要条件"><a href="#产生死锁的四个必要条件" class="headerlink" title="产生死锁的四个必要条件"></a>产生死锁的四个必要条件</h1><p>对资源（不止是锁，还有内存、IO等）的请求都可能导致死锁。四个必要条件同时满足才 可能 产生死锁（必要不充分）。</p>
<ul>
<li><p><strong>互斥</strong>：资源必须处于非共享模式，即一次只有一个进程可以使用。如果另一进程申请该资源，那么必须等待直到该资源被释放为止。</p>
</li>
<li><p><strong>占有并等待</strong>：一个进程至少应该占有一个资源，并等待另一资源，而该资源被其他进程所占有。（才有可能成环）</p>
</li>
<li><p><strong>不可抢占</strong>：资源只能等待进程使用完自愿释放，不能被抢占。</p>
</li>
<li><p><strong>环路等待</strong>：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。如图所示，图中，圆形表示线程，方形表示资源。</p>
</li>
</ul>
<p><img src="/2022/04/02/deadlock/image-20220402135304631.png" alt="image-20220402135304631"></p>
<h1 id="解决死锁的方法"><a href="#解决死锁的方法" class="headerlink" title="解决死锁的方法"></a>解决死锁的方法</h1><p>解决死锁的方法可以从多个角度去分析，一般的情况下，有<strong>预防，避免，检测和解除</strong>四种。</p>
<ul>
<li><strong>预防</strong>是采用某种策略，<strong>限制并发进程对资源的请求</strong>，破坏死锁必要条件，确保系统永远不会进入死锁状态</li>
<li><strong>避免</strong>则是系统在分配资源时，根据资源的使用情况提前做出预测，从而避免死锁的发生</li>
<li><strong>检测</strong>是指系统设有专门的机构，<strong>当死锁发生时</strong>，该机构能够检测死锁的发生，并精确地确定与死锁有关的进程和资源。</li>
<li><strong>解除</strong>是与检测相配套的一种措施，用于<strong>将进程从死锁状态下解脱出来</strong>。</li>
</ul>
<h2 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h2><p>只要破坏四个必要条件中的任何一个就能够预防死锁的发生。</p>
<ul>
<li><p>破坏<strong>互斥</strong>条件：大多数情况下，资源往往不能同时访问，因此很难避免互斥。比较并交换（compare-and-swap）指令来实现锁，不会有死锁（有可能产生活锁）</p>
</li>
<li><p>破坏<strong>占有并等待</strong>条件：静态分配策略——进程在开始运行时，一次性申请所有需要的资源。这种策略 <strong>严重地降低了资源利用率</strong>。因为在每个进程所占有的资源中，有些资源是在比较靠后的执行时间里采用的，甚至有些资源是在额外的情况下才是用的，这样就可能造成了一个进程占有了一些 几乎不用的资源而使其他需要该资源的进程产生等待 的情况。</p>
</li>
<li><p>破坏<strong>非抢占</strong>条件：剥夺式调度算法——进程请求不能立即分配的资源，则释放自身已占有资源。例如使用如下 trylock 语句。会导致资源利用率下降。</p>
</li>
</ul>
<p><img src="/2022/04/02/deadlock/image-20220402135725012.png" alt="image-20220402135725012"></p>
<ul>
<li>破坏<strong>环路等待</strong>条件：层次分配策略。在层次分配策略下，所有的资源被分成了多个层次，一个进程得到某一次的一个资源后，它只能再申请较高一层的资源；当一个进程要释放某层的一个资源时，必须先释放所占用的较高层的资源。证明略。</li>
</ul>
<p>最简单的例子，给资源统一编号，进程只能按编号顺序来请求资源。假如系统共有两个锁（L1 和 L2），那么我们每次都先申请 L1 然后申请 L2，就可以避免死锁</p>
<p>一般比较<strong>实用</strong>的 预防死锁的方法，是通过考虑破坏第二个条件和第四个条件。</p>
<h2 id="死锁的避免"><a href="#死锁的避免" class="headerlink" title="死锁的避免"></a>死锁的避免</h2><p>上面提到的 <strong>破坏</strong> 死锁产生的四个必要条件之一就可以成功 <strong>预防系统发生死锁</strong> ，但是会导致 <strong>低效的进程运行 和 资源使用率</strong> 。而死锁的<strong>避免</strong>相反，它的角度是<strong>允许</strong>系统中<strong>同时存在四个必要条件</strong> ，只要掌握并发进程中与每个进程有关的资源动态申请情况，做出 <strong>明智和合理的选择</strong> ，仍然可以避免死锁，因为四大条件<strong>仅仅</strong>是产生死锁的必要条件。</p>
<p>我们将系统的状态分为 <strong>安全状态</strong> 和 <strong>不安全状态</strong> ，每当在未申请者分配资源前先测试系统状态，若把系统资源分配给申请者会产生死锁，则拒绝分配，否则接受申请，并为它分配资源。</p>
<p><strong>安全状态</strong> 指的是系统能够按照某种线程推进顺序（P1、P2、P3…..Pn）来为每个线程分配所需资源，直到满足每个线程对资源的最大需求，使每个线程都可顺利完成。</p>
<p>那么如何保证系统保持在安全状态呢？通过算法，其中最具有代表性的避免死锁算法就是 Dijkstra 的<strong>银行家算法</strong>，银行家算法用一句话表达就是：当一个进程申请使用资源的时候，银行家算法 通过先 <strong>试探</strong> 分配给该进程资源，然后通过 <strong>安全性算法</strong> 判断分配后系统是否处于安全状态，若不安全则试探分配作废，让该进程继续等待，若能够进入到安全的状态，就真的分配资源给该进程。</p>
<p>例子</p>
<p><img src="/2022/04/02/deadlock/image-20220402135655731.png" alt="image-20220402135655731"></p>
<p>四个进程，三种需要分配的资源。</p>
<ul>
<li>资源请求矩阵 &#x3D; C - A</li>
<li><strong>可用资源向量</strong>由系统资源向量 R 和已分配资源矩阵 A 计算得到：[2 1 2] &#x3D; [9-7 3-2 6-4]</li>
</ul>
<p>如果此时线程 T1 和 T2 均发出<strong>资源请求向量</strong> Request(1, 0, 1)，为了保证系统的安全性，如何分配资源给这两个线程？说明所采用策略的原因。</p>
<p>假设分配给 T1 ：</p>
<ul>
<li>(1, 0, 1) 小于 T1 的需求 (2, 2, 2)，也小于可用资源向量 V，允许分配</li>
<li>分配之后，V &#x3D; (1, 0, 1)，资源请求矩阵第一行变为 (1, 2, 1)，可用资源 <strong>无法</strong> <strong>一次性</strong> 满足某个线程的需求（即 V 小于资源请求矩阵任意一行），所以分配给 T1 是不安全的。<strong>无法</strong> <strong>一次性</strong> ：（需要等待其他线程释放资源，且互相等待，造成死锁）</li>
</ul>
<p>假设分配给 T2 ：</p>
<ul>
<li>(1, 0, 1) 小于 T2 的需求，也小于可用资源向量 V，允许分配</li>
<li>分配之后，V &#x3D; (1, 0, 1)，资源请求矩阵第二行变为 (1, 0, 1)，可用资源可以 一次性满足某个线程的需求，所以分配给 T2 是安全的。分配给 T2 后修改各个矩阵。</li>
</ul>
<p>死锁的避免改善<strong>解决了 资源使用率低的问题</strong>，但是它要不断地检测每个进程对各类资源的占用和申请情况，以及做 安全性检查 ，需要<strong>花费</strong>较多的<strong>时间</strong>。</p>
<h2 id="死锁的检测"><a href="#死锁的检测" class="headerlink" title="死锁的检测"></a>死锁的检测</h2><p>对资源的分配加以限制可以预防和避免死锁的发生，但是都不利于各进程对系统资源的<strong>充分共享</strong>。解决死锁问题的另一条途径是 <strong>死锁检测和解除</strong></p>
<p>类比乐观锁和悲观锁，感觉死锁的检测和解除就像是 乐观锁 ，分配资源时不去提前管会不会发生死锁了，等到真的死锁出现了再来解决，而 死锁的预防和避免 更像是悲观锁，总是觉得死锁会出现，所以在分配资源的时候就很谨慎。</p>
<p>死锁检测和恢复技术。<strong>死锁检测器会定期运行，通过构建资源图来判断系统内是否出现死锁，如果检测到系统发生了死锁，再采取措施去解除它</strong>。</p>
<h3 id="进程-资源分配图"><a href="#进程-资源分配图" class="headerlink" title="进程-资源分配图"></a>进程-资源分配图</h3><p>操作系统中的每一刻时刻的系统状态都可以用<strong>进程-资源分配图</strong>来表示，进程-资源分配图是描述进程和资源申请及分配关系的一种有向图，可用于<strong>检测系统是否处于死锁状态</strong>。</p>
<p>用一个方框表示每一个资源类，方框中的黑点表示该资源类中的各个资源，每个键进程用一个圆圈表示，用 <strong>有向边</strong> 来表示<strong>进程申请资源和资源被分配的情况</strong>。</p>
<p>图中 2-21 是<strong>进程-资源分配图</strong>的一个例子，其中共有三个资源类，每个进程的资源占有和申请情况已清楚地表示在图中。在这个例子中，由于存在 <strong>占有和等待资源的环路</strong> ，导致一组进程永远处于等待资源的状态，发生了 <strong>死锁</strong>。</p>
<p><img src="/2022/04/02/deadlock/image-20220402135648340.png" alt="image-20220402135648340"></p>
<p>进程-资源分配图中存在环路并不一定是发生了死锁。因为循环等待资源仅仅是死锁发生的必要条件，而不是充分条件。图 2-22 便是一个有环路而无死锁的例子。（资源类有多个资源）虽然进程 P1 和进程 P3 分别占用了一个资源 R1 和一个资源 R2，并且因为等待另一个资源 R2 和另一个资源 R1 形成了环路，但进程 P2 和进程 P4 分别占有了一个资源 R1 和一个资源 R2，它们申请的资源得到了满足，在有限的时间里会归还资源，于是进程 P1 或 P3 都能获得另一个所需的资源，环路自动解除，系统也就不存在死锁状态了。</p>
<h3 id="死锁检测步骤"><a href="#死锁检测步骤" class="headerlink" title="死锁检测步骤"></a>死锁检测步骤</h3><p>知道了死锁检测的原理，我们可以利用下列步骤编写一个 <strong>死锁检测</strong> 程序，检测系统是否产生了死锁。</p>
<ol>
<li>如果进程-资源分配图中无环路，则此时系统没有发生死锁</li>
<li>如果进程-资源分配图中有环路，且每个资源类仅有一个资源，则系统中已经发生了死锁。</li>
<li>如果进程-资源分配图中有环路，且涉及到的资源类有多个资源，此时系统未必会发生死锁。如果能在进程-资源分配图中找出一个 <strong>既不阻塞又非独立的进程</strong> ，该进程能够在有限的时间内归还占有的资源，也就是把边给消除掉了，重复此过程，直到能在有限的时间内 <strong>消除所有的边</strong> ，则不会发生死锁，否则会发生死锁。(消除边的过程类似于 <strong>拓扑排序</strong>)</li>
</ol>
<h2 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h2><p>当死锁检测程序检测到存在死锁发生时，应设法让其解除，让系统从死锁状态中恢复过来，常用的解除死锁的方法有以下四种：</p>
<ol>
<li><strong>立即结束所有进程的执行，重新启动操作系统</strong> ：这种方法简单，但以前所在的工作全部作废，损失很大。</li>
<li><strong>一次性撤销涉及死锁的所有进程，继续运行</strong> ：这种方法能彻底打破<strong>死锁的循环等待</strong>条件，但将付出很大代价，例如有些进程可能已经计算了很长时间，由于被撤销而使产生的部分结果也被消除了，再重新执行时还要再次进行计算。</li>
<li><strong>逐个撤销</strong>涉及死锁的进程，<strong>回收其资源直至死锁解除。</strong></li>
<li><strong>抢占资源</strong> ：从涉及死锁的一个或几个进程中抢占资源，把夺得的资源再分配给涉及死锁的进程直至死锁解除。</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2022/04/05/DesignMode/</url>
    <content><![CDATA[<p>设计模式</p>
<span id="more"></span>

<h1 id="单例模式（Singleton）"><a href="#单例模式（Singleton）" class="headerlink" title="单例模式（Singleton）"></a>单例模式（Singleton）</h1><p>目的：确保一个类只有一个实例，并提供该实例的全局访问点。</p>
<p><strong>应用场景</strong>举例：</p>
<ol>
<li><p>一个班级只有一个班主任。</p>
</li>
<li><p>在操作一个文件的时候，出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>
</li>
</ol>
<h2 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h2><p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p>
<p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p>
<img src="/2022/04/05/DesignMode/1647569125447-5b964ad9-e0d0-4a0e-a6d7-56992f4ae678.png" alt="img" style="zoom:80%;">

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>懒汉式，需要的时候才会触发初始化实例对象。而饿汉式正好相反，Singleton 类加载的时候，就会创建初始化单例对象。</p>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h4 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h4><p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p>
<p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 if (uniqueInstance &#x3D;&#x3D; null) ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 uniqueInstance &#x3D; new Singleton(); 语句，这将导致多次实例化uniqueInstance。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="单锁检查-线程安全"><a href="#单锁检查-线程安全" class="headerlink" title="单锁检查-线程安全"></a>单锁检查-线程安全</h4><p><strong>对 getUniqueInstance() 方法加锁</strong>，那么在一个时间点只能有一个线程能够进入该方法，从而避免了多次 实例化uniqueInstance。</p>
<p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 uniqueInstance 已经被实例化了。这会让线程阻塞时间过长。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">        uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="双重校验锁（Double-Check-Lock-DCL）-线程安全"><a href="#双重校验锁（Double-Check-Lock-DCL）-线程安全" class="headerlink" title="双重校验锁（Double Check Lock, DCL）-线程安全"></a>双重校验锁（Double Check Lock, DCL）-线程安全</h4><p>uniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p>
<p>双重校验锁先判断 uniqueInstance 是否已经被实例化，<strong>如果没有被实例化，那么才对实例化语句进行加锁</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance &#x3D;&#x3D; null 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 uniqueInstance &#x3D; new Singleton(); 这条语句，只是先后的问题，那么就会进行两次实例化。</p>
<p>因此必须使用<strong>双重校验锁，也就是需要使用两个 if 语句进行较验</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">        uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>uniqueInstance 采用 volatile 关键字修饰</strong>也是很有必要的， uniqueInstance &#x3D; new Singleton(); 这段代码其实是分为三步执行：</p>
<ol>
<li>为 uniqueInstance 分配内存空间</li>
<li>初始化 uniqueInstance</li>
<li>将 uniqueInstance 指向分配的内存地址</li>
</ol>
<p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p>
<p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p>
<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><h4 id="直接实例化-线程安全"><a href="#直接实例化-线程安全" class="headerlink" title="直接实例化-线程安全"></a>直接实例化-线程安全</h4><p>线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p>
<p>private static Singleton uniqueInstance &#x3D; new Singleton(); </p>
<p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p>
<h4 id="静态内部类实现"><a href="#静态内部类实现" class="headerlink" title="静态内部类实现"></a>静态内部类实现</h4><p>当 Singleton 类被加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例。</p>
<p>假设有多个线程调用 <code>getUniqueInstance()</code>，由 JVM 保证加载  SingletonHolder 类的线程安全性。SingletonHolder 类 只会被加载一次，生成唯一一份静态变量。</p>
<blockquote>
<p>INSTANCE 是静态变量，从类加载阶段中的初始化阶段来看，虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕。</clinit></clinit></clinit></p>
<p>需要注意的是，其他线程虽然会被阻塞，但如果执行 <clinit>() 方法后，其他线程唤醒之后不会再次进入<clinit>() 方法。同一个加载器下，一个类型只会初始化一次。（这与一般的 Synchronized 方法有显著区别）</clinit></clinit></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与饿汉式直接实例化相比较，实现了延迟初始化，同样是线程安全的。</p>
<h4 id="枚举实现"><a href="#枚举实现" class="headerlink" title="枚举实现"></a>枚举实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String objName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObjName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> objName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObjName</span><span class="params">(String objName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.objName = objName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单例测试</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">firstSingleton</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br><span class="line">        firstSingleton.setObjName(<span class="string">&quot;firstName&quot;</span>);</span><br><span class="line">        System.out.println(firstSingleton.getObjName());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">secondSingleton</span> <span class="operator">=</span> Singleton.INSTANCE; <span class="comment">// 获得同一个实例</span></span><br><span class="line">        secondSingleton.setObjName(<span class="string">&quot;secondName&quot;</span>); <span class="comment">// 改变实例</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(firstSingleton.getObjName());</span><br><span class="line">        System.out.println(secondSingleton.getObjName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取实例测试</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Singleton[] enumConstants = Singleton.class.getEnumConstants();</span><br><span class="line">            <span class="keyword">for</span> (Singleton enumConstant : enumConstants) &#123;</span><br><span class="line">                System.out.println(enumConstant.getObjName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">firstName</span><br><span class="line">secondName</span><br><span class="line">secondName</span><br><span class="line">secondName</span><br></pre></td></tr></table></figure>

<p><strong>枚举实现可以防止反射攻击</strong>。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p>
<p>也因为枚举实现可以防止反射攻击，所有该实现在多次序列化和序列化之后，不会得到多个实例。</p>
<h2 id="破坏单例模式"><a href="#破坏单例模式" class="headerlink" title="破坏单例模式"></a>破坏单例模式</h2><p>有哪些方式可以破坏单例模式呢？主要但是不限于以下几种：</p>
<ul>
<li>没有将构造器私有化，可以直接调用。</li>
<li>反射调用构造器</li>
<li>序列化与反序列化</li>
</ul>
<h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>除了枚举实现之外，单例模式的其他实现方法，都可以通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Hello &#123;</span><br><span class="line">    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line"></span><br><span class="line">        //获取Singleton字节码对象</span><br><span class="line">        Class&lt;Singleton&gt; singletonClass = Singleton.class;</span><br><span class="line">        //获取无参构造方法</span><br><span class="line">        Constructor&lt;Singleton&gt; declaredConstructor = singletonClass.getDeclaredConstructor();</span><br><span class="line">        //将私有构造函数的访问级别设置为 public</span><br><span class="line">        declaredConstructor.setAccessible(true);</span><br><span class="line">        </span><br><span class="line">        //创建Singleton对象</span><br><span class="line">        Singleton singleton = (Singleton) declaredConstructor.newInstance();</span><br><span class="line">        Singleton singleton1 = (Singleton) declaredConstructor.newInstance();</span><br><span class="line">        //通过hashCode查看是否是同一个对象</span><br><span class="line">        System.out.println(singleton.hashCode());</span><br><span class="line">        System.out.println(singleton1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Singleton&#123;</span><br><span class="line">    //私有构造方法</span><br><span class="line">    private Singleton()&#123; &#125;</span><br><span class="line"></span><br><span class="line">    //定义一个静态内部类</span><br><span class="line">    private static class SingletonHolder&#123;</span><br><span class="line">        //只会初始化一次</span><br><span class="line">        private static final Singleton singleton= new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    //给外界提供一个方法用于访问</span><br><span class="line">    public static synchronized Singleton getSingleton()&#123;</span><br><span class="line">        return SingletonHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="避免反射破坏单例模式"><a href="#避免反射破坏单例模式" class="headerlink" title="避免反射破坏单例模式"></a>避免反射破坏单例模式</h4><p>防止多次实例化，也就是调用一次之后，再调用就报错，抛出异常。（通过反射调用私有构造器肯定是在之后？懒汉式不一定吧？）</p>
<p>我们的单例模式可以写成这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static int num = 0;</span><br><span class="line"></span><br><span class="line">    private volatile static Singleton singleton;</span><br><span class="line"></span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">        synchronized (Singleton.class) &#123;</span><br><span class="line">            if (num == 0) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new RuntimeException(&quot;Don&#x27;t use this method&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton getSingleton() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if (singleton == null) &#123;</span><br><span class="line">                    singleton = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果如下,反射调用的时候抛出异常了，说明能够有效阻止反射调用破坏单例的模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.reflect.InvocationTargetException</span><br></pre></td></tr></table></figure>

<p>如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。需要使用 transient 修饰所有字段，并且实现序列化和反序列化的方法，也是为了防止多次实例化。</p>
<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>很多对象都是必须实现序列化接口的，但是实现了序列化接口之后，可能无法保证单例。这是因为<strong>序列化之后，再反序列化回来</strong>，对象的内容是一样的，但是对象却不是同一个对象了。</p>
<p>普通的 Java 类的反序列化过程中，会通过反射调用类的默认构造函数来初始化对象。如果不希望它进行反射怎么办？根据反序列化的源码，如果有实现<code>readResolve()</code>，那就直接调用该方法返回结果，而不是返回反射调用之后的结果。</p>
<p>因此，可以重写 readResolve()，综合得到改造后的单例模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>,Cloneable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Don&#x27;t use this method&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 阻止反序列反射生成对象</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2022/04/04/JVM/</url>
    <content><![CDATA[<p>如果没有特殊说明，都是针对的是 HotSpot 虚拟机。</p>
<span id="more"></span>

<h1 id="Java-内存区域"><a href="#Java-内存区域" class="headerlink" title="Java 内存区域"></a>Java 内存区域</h1><p><img src="/2022/04/04/JVM/1647436365919-9cd662d0-1aa3-4501-902e-59dcd6095c3d.png"></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>作用：</p>
<ul>
<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li>
<li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li>
</ul>
<blockquote>
<p>程序计数器是唯一一个不会出现 <code>OutOfMemoryError</code> 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p>
</blockquote>
<h2 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h2><p>描述的是 Java 方法执行的内存模型</p>
<p>Java 虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。</p>
<p>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。</p>
<ul>
<li>StackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。可以用参数 -Xss 来调整栈的大小。</li>
<li>OutOfMemoryError： Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出 OutOfMemoryError 异常。</li>
</ul>
<blockquote>
<p>OOM：</p>
<p>栈 OOM，比如 32 位的 windows 系统单进程限制 2G 内存，无限创建线程就会发生 OOM（2G 用完了）</p>
<p>堆 OOM，GC 之后无法在堆中申请足够内存创建对象；</p>
<p>方法区 OOM，经常会遇到的是动态生成大量的类等；</p>
<p>排查 OOM 的方法：</p>
<p>增加两个参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&#x3D;&#x2F;tmp&#x2F;heapdump.hprof，当 OOM 发生时自动 dump 堆内存信息到指定目录；</p>
<p>jstat 查看 JVM 的内存和 GC 情况；</p>
<p>使用 MAT 工具载入到 dump 文件，分析大对象的占用情况，比如 HashMap 做缓存未清理，时间长了就会内存溢出，可以把改为弱引用 </p>
</blockquote>
<h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><p>一个栈帧需要分配多少内存，不会受到程序运行时变量数据影响，仅仅取决于虚拟机的实现</p>
<p>如下图所示。虚拟机栈包含了两个 Java 方法的栈帧，而每个栈帧包括：局部变量表、操作数栈、动态链接、方法出口信息</p>
<p><img src="/2022/04/04/JVM/webp.webp"></p>
<h4 id="局部变量表（Local-Variable-Table）"><a href="#局部变量表（Local-Variable-Table）" class="headerlink" title="局部变量表（Local Variable Table）"></a>局部变量表（Local Variable Table）</h4><p>在编译代码的时候就可以确定栈帧需要多大的局部表量表，具体的大小可以在编译后的 Class 文件中看到。</p>
<p>局部变量表容量以变量槽（Variable Slot）为最小单位，每个变量槽长度 4 个字节</p>
<p>用于存放方法内的局部变量。虚拟机使用局部变量表完成参数值到参数变量表的传递过程，如果执行的是实例方法，那局部表量表的第 0 个槽位默认是用于传递方法所属对象的引用（this关键字）。</p>
<h4 id="操作数栈（Operand-Stack）"><a href="#操作数栈（Operand-Stack）" class="headerlink" title="操作数栈（Operand Stack）"></a>操作数栈（Operand Stack）</h4><p>在编译代码的时候就可以确定栈帧需要多大的操作数栈，具体的大小可以在编译后的 Class 文件中看到。</p>
<p>在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址， 然后是函数的各个参数，然后是函数中的局部变量。注意静态变量是不入栈的。</p>
<p>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</p>
<h4 id="动态链接（Dynamic-Linking）"><a href="#动态链接（Dynamic-Linking）" class="headerlink" title="动态链接（Dynamic Linking）"></a>动态链接（Dynamic Linking）</h4><p>动态链接：一个指向运行时常量池中该栈帧所属方法的引用。运行时常量池中该栈帧所属方法的存在方式是一个符号引用，或者直接引用（如果之前被解析过）</p>
<h4 id="完成出口（Return-Address，也叫做返回地址-）"><a href="#完成出口（Return-Address，也叫做返回地址-）" class="headerlink" title="完成出口（Return Address，也叫做返回地址 ）"></a>完成出口（Return Address，也叫做返回地址 ）</h4><p>两种退出方式：return 返回指令，异常退出</p>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>和虚拟机栈所发挥的作用非常相似，区别是： 虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>
<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧</p>
<p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 两种错误。</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象<strong>实例</strong>，几乎所有的对象实例以及数组都在这里分配内存。</p>
<p>new 一个对象，对象实例存放在堆中，对象的引用存放在栈中。</p>
<p>Java 堆是垃圾收集器管理的主要区域，因此也被称作GC 堆（Garbage Collected Heap）。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>它用于存储已被虚拟机加载的类信息（Class 文件）、常量、静态变量、即时编译器（JIT compiler）编译后的代码等数据。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。</p>
<p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool），用于存放编译期生成的符号引用，这部分内容将在类加载阶段存放到方法区的运行时常量池中。在类的解析阶段还会将这些符号引用翻译为直接引用，用翻译出来的直接引用替换原本的符号引用。</p>
<p>运行时常量池相对于 class 常量池一大特征就是具有动态性。在运行时可以通过代码生成常量并将其放入运行时常量池中，这种特性被用的最多的就是 String.intern()。</p>
<p>对于静态变量，它的引用是存储在方法区的，但是它指向的对象还是在堆中创建的，比如:static int i &#x3D; 1; &#x2F;&#x2F;1这个值是存储在方法区static Object o &#x3D; new SomeObject(); &#x2F;&#x2F;o这个引用是存储在方法区,但是SomeObject()这个对象却是存储在堆中的</p>
<h1 id="JVM-调优"><a href="#JVM-调优" class="headerlink" title="JVM 调优"></a>JVM 调优</h1><h2 id="JVM-调优命令"><a href="#JVM-调优命令" class="headerlink" title="JVM 调优命令"></a>JVM 调优命令</h2><ul>
<li><p>jps：JVM Process Status Tool，显示指定系统内所有的 HotSpot 虚拟机进程。</p>
</li>
<li><p>jstat：JVM statistics Monitoring，是用于监视虚拟机运行时状态信息的命令，它可以显示出虚<br>  拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。</p>
</li>
<li><p>jmap：JVM Memory Map，用于生成 heap dump 文件，如果不使用这个命令，还可以使<br>  用 -XX:+HeapDumpOnOutOfMemoryError 参数来让虚拟机出现 OOM 的时候·自动生成dump文<br>  件。<br>  jmap不仅能生成 dump 文件，还可以查询 finalize 执行队列、Java 堆和永久代的详细信息，如当前使<br>  用率、当前使用的是哪种收集器等。</p>
</li>
<li><p>jhat：JVM Heap Analysis Tool，与 jmap 搭配使用，用来分析 jmap 生成的 dump 文件，jhat 内<br>  置了一个微型的 HTTP&#x2F;HTML 服务器，生成 dump 的分析结果后，可以在浏览器中查看。在此要注<br>  意，一般不会直接在服务器上进行分析，因为 jhat 是一个耗时并且耗费硬件资源的过程，一般把服<br>  务器生成的 dump 文件复制到本地或其他机器上进行分析。</p>
</li>
<li><p>jstack：jstack 用于生成 java 虚拟机当前时刻的线程快照。jstack 来查看各个线程的调用堆栈，就可<br>  以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果 java 程序崩溃生成 core 文<br>  件，jstack 工具可以用来获得 core 文件的 java stack 和 native stack 的信息，从而可以轻松地知道<br>  java 程序是如何崩溃和在程序何处发生问题。</p>
</li>
</ul>
<h1 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h1><p>考虑这样一个 Java 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">X</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    bar();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Class 文件，后缀名是 .class，也可以叫做 .class 文件，这两个称呼区别于 Class 对象。用 javac 编译器编译出来的 Class 文件的文本形式（存储时为二进制形式）如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Classfile /private/tmp/X.class</span><br><span class="line">  Last modified Jun 13, 2015; size 372 bytes</span><br><span class="line">  MD5 checksum 8abb9cbb66266e8bc3f5eeb35c3cc4dd</span><br><span class="line">  Compiled from &quot;X.java&quot;</span><br><span class="line">public class X</span><br><span class="line">  SourceFile: &quot;X.java&quot;</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 51</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #4.#16         //  java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Methodref          #3.#17         //  X.bar:()V</span><br><span class="line">   #3 = Class              #18            //  X</span><br><span class="line">   #4 = Class              #19            //  java/lang/Object</span><br><span class="line">   #5 = Utf8               &lt;init&gt;</span><br><span class="line">   #6 = Utf8               ()V</span><br><span class="line">   #7 = Utf8               Code</span><br><span class="line">   #8 = Utf8               LineNumberTable</span><br><span class="line">   #9 = Utf8               LocalVariableTable</span><br><span class="line">  #10 = Utf8               this</span><br><span class="line">  #11 = Utf8               LX;</span><br><span class="line">  #12 = Utf8               foo</span><br><span class="line">  #13 = Utf8               bar</span><br><span class="line">  #14 = Utf8               SourceFile</span><br><span class="line">  #15 = Utf8               X.java</span><br><span class="line">  #16 = NameAndType        #5:#6          //  &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #17 = NameAndType        #13:#6         //  bar:()V</span><br><span class="line">  #18 = Utf8               X</span><br><span class="line">  #19 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  public X();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0       </span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return        </span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">               0       5     0  this   LX;</span><br><span class="line"></span><br><span class="line">  public void foo();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0       </span><br><span class="line">         1: invokevirtual #2                  // Method bar:()V</span><br><span class="line">         4: return        </span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">        line 4: 4</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">               0       5     0  this   LX;</span><br><span class="line"></span><br><span class="line">  public void bar();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=0, locals=1, args_size=1</span><br><span class="line">         0: return        </span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 6: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">               0       1     0  this   LX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到 Class 文件里有一段叫做 Constant pool，也就是常量池</p>
<p>来观察 foo() 方法是如何调用 bar() 的，具体地，来考察 foo() 方法里的一条字节码指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1: invokevirtual #2  // Method bar:()V</span><br></pre></td></tr></table></figure>

<p>该字节码指令的二进制存储格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[B6] [00 02]</span><br></pre></td></tr></table></figure>

<p>其中 0xB6 是 invokevirtual 指令的操作码（opcode），后面的 0x0002 是该指令的操作数（operand），用于指定要调用的目标方法。因此，我们来看它的操作数。</p>
<p>这个参数是 Class 文件里的常量池的下标。那么去找下标为 2 的常量池项，是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#2 = Methodref          #3.#17         //  X.bar:()V</span><br></pre></td></tr></table></figure>

<p>该语句的二进制存储格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0A] [00 03] [00 11]</span><br></pre></td></tr></table></figure>

<p>其中 0x0A 是 CONSTANT_Methodref_info 的 tag，后面的 0x03 和 0x11 是常量池下标，分别表示 class_index 和 name_and_type_index。</p>
<p>顺着这条线索把能传递引用到的常量池项都找出来，会看到（按深度优先顺序排列）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> #2 = Methodref          #3.#17         //  X.bar:()V</span><br><span class="line"> </span><br><span class="line"> #3 = Class              #18            //  X</span><br><span class="line">#18 = Utf8               X</span><br><span class="line"></span><br><span class="line">#17 = NameAndType        #13:#6         //  bar:()V</span><br><span class="line">#13 = Utf8               bar</span><br><span class="line"> #6 = Utf8               ()V</span><br></pre></td></tr></table></figure>

<p>把引用关系画成一棵树：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     #2 Methodref X.bar:()V</span><br><span class="line">     /                     \</span><br><span class="line">#3 Class X       #17 NameAndType bar:()V</span><br><span class="line">    |                /             \</span><br><span class="line">#18 Utf8 X    #13 Utf8 bar     #6 Utf8 ()V</span><br></pre></td></tr></table></figure>

<p>总而言之，Class 文件里的符号引用实际上是：带有类型（tag） &#x2F; 结构（符号间引用层次）的字符串。</p>
<p>JVM在类加载的时候会把 Class 文件转化为<strong>方法区</strong>的运行时数据结构。例如说类的元数据记录在 ClassClass 结构体里，每个方法的元数据记录在各自的 methodblock 结构体里。</p>
<p>在刚加载好一个类的时候，Class文件里的常量池和每个方法的字节码（Code属性）会被基本原样的拷贝到内存里先放着，也就是说仍然处于使用“符号引用”的状态；直到真的要被使用到的时候才会被解析（resolve）为直接引用。</p>
<p>为什么要带类型？</p>
<p>这些结构体应该在方法去</p>
<p>通过Methodref所记录的class_index找到类名，进一步找到被调用方法的类的ClassClass结构体；然后通过name_and_type_index找到方法名和方法描述符，到ClassClass结构体上记录的方法列表里找到匹配的那个methodblock；最终把找到的methodblock的指针写回到常量池项#2里。</p>
<p>可以看到，方法表各个方法按序排列，并且每个方法具有该方法的详细信息，包括 code，即字节码指令，后面被加载到方法区</p>
<h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><ul>
<li><p>主要三步：加载 -&gt; 连接 -&gt; 初始化。连接过程又可分为三步：验证 -&gt; 准备 -&gt; 解析。</p>
</li>
<li><p>何时会执行各个加载步骤？</p>
<p>  动态加载，并不是一次性把所有程序中定义的 class 全部加载到内存，而是第一次用到 class 时才加载</p>
<p>  加载阶段和连接阶段的部分内容是交叉进行的，加载阶段尚未结束，连接阶段可能就已经开始了。</p>
<p>  解析时机：<strong>用于操作符号引用的字节码指令</strong>之前，先对它们所使用的符号引用进行解析</p>
</li>
</ul>
<h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>在加载阶段，虚拟机需要完成以下三件事情：</p>
<ol>
<li>通过一个类的全限定名来获取此类的二进制字节流。例如，用 javac 编译得到的 .class 文件（也称做 Class 文件）</li>
<li>将这个字节流所代表的静态存储结构转化为<strong>方法区</strong>的运行时数据结构（类元数据，包括常量池、属性表、方法表和异常表等）。这个过程包含了 .class 文件中的常量池存放到运行时常量池的过程。</li>
<li>在<strong>堆</strong>中生成一个 java.lang.Class 对象，用来封装在方法区内的类型数据，并作为方法区类型数据的外部接口。（通过堆中的 Class 对象，访问方法区中的类的数据结构）</li>
</ol>
<p><img src="/2022/04/04/JVM/331425-20160621125941772-1913742708.png"></p>
<blockquote>
<p>Class 作为方法区类型数据的外部接口，Class 实例本身没有类型数据，但 Class 实例具有指向类元数据的指针，通过这个指针访问类元数据。</p>
<p>普通对象实例也具有指向类元数据的指针，但是要获取类的信息，需要通过 getClass()，得到的是 Class 对象的引用，不能直接得到对象头中指向类元数据的指针。</p>
<p>类元数据包含 Class 对象的引用。</p>
<ul>
<li>具体来说，当使用 String.class，String 即 String 类元数据的指针，.class 即获取类元数据中 Class 对象的引用</li>
<li>当使用 对象.getClass() 和 class.forName()，前者看似是得到对象头中指向类元数据的指针，后者看似是直接得到指向类元数据的指针，实际上在函数内部处理后，返回的还是 Class 对象的引用。</li>
</ul>
</blockquote>
<p>一个非数组类的加载阶段（具体地，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，这一步我们可以去完成还可以自定义类加载器去控制字节流的获取方式（重写一个类加载器的 loadClass() 方法）。</p>
<p>数组类型不通过类加载器创建，它由 Java 虚拟机直接创建。</p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配（方法区中存放着类的数据结构）。对于该阶段有以下几点需要注意：</p>
<ol>
<li>这时候进行内存分配的仅包括类变量（ 即类的静态变量），而不包括实例变量。实例变量会在对象实例化时随着对象一块分配在 Java 堆中。</li>
<li>从概念上讲，类变量所使用的内存都应当在 方法区 中进行分配。不过有一点需要注意的是：JDK 7 之前，HotSpot 使用永久代来实现方法区的时候，实现是完全符合这种逻辑概念的。 而在 JDK 7 及之后，HotSpot 已经把原本放在永久代的字符串常量池、静态变量等移动到堆中，这个时候类变量则会随着 Class 对象一起存放在 Java 堆中。当class文件被加载到内存中时，类文件常量池中的其他常量会加载到运行时常量池，但是字符串常量不会。它会首先在堆区中创建一个字符串对象，然后再把这个对象的引用保存到全局字符串常量池中</li>
<li>这里所设置的初始值通常情况下是数据类型默认的零值，比如我们定义了 public static int value&#x3D;111，那么 value 变量在准备阶段的初始值就是 0 而不是 111（初始化阶段才会赋值）。特殊情况：给 value 变量加上了 final 关键字，public static final int value&#x3D;111 ，那么准备阶段 value 的值就被赋值为 111。</li>
</ol>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。（常量池原本存储的是符号引用，被替换成了直接引用）</p>
<p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用限定符 7 类符号引用进行。</p>
<p>符号引用就是一组符号来描述目标，可以是任何字面量。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>
<p>以解析方法的符号引用为例，在执行方法时，系统需要明确知道这个方法所在的地址。Java 虚拟机为每个类都准备了一张方法表来存放类中所有的方法。当需要调用一个类的方法的时候，只要知道这个方法在方法表中的偏移量就可以直接调用该方法了。通过解析符号引用就可以直接转变为目标方法在类中方法表的位置，从而使得方法可以被调用。</p>
<blockquote>
<p>《Java虚拟机规范》之中并未规定解析阶段发生的具体时间，只要求了在执行 ane-warray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invoke-special、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield 和 putstatic 这17个<strong>用于操作符号引用的字节码指令</strong>之前，先对它们所使用的符号引用进行解析。所以虚拟机实现可以根据需要来自行判断，到底是在类被加载器加载时就对常量池中的符号引用进行解析，还是等到一个符号引用将要被使用前才去解析它。</p>
</blockquote>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p> <clinit> () 方法是编译之后自动生成的。初始化阶段是执行初始化方法 <clinit> ()方法的过程，是类加载的最后一步，这一步 JVM 才开始真正执行类中定义的 Java 程序代码（字节码）。</clinit></clinit></p>
<p>虚拟机会保证一个类的 <clinit>() 方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 <clinit>() 方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>() 方法完毕。</clinit></clinit></clinit></p>
<p>需要注意的是，其他线程虽然会被阻塞，但如果执行 <clinit>() 方法后，其他线程唤醒之后不会再次进入<clinit>() 方法。同一个加载器下，一个类型只会初始化一次。（这与一般的 Synchronized 方法有显著区别）</clinit></clinit></p>
<blockquote>
<p><init> 是实例构造器，对非静态变量初始化，而  <clinit> 是类构造器，对静态变量，静态代码块进行初始化。</clinit></init></p>
</blockquote>
<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>JVM 中内置了三个重要的 ClassLoader，除了 BootstrapClassLoader 其他类加载器均由 Java 实现且全部继承自java.lang.ClassLoader：</p>
<ol>
<li>BootstrapClassLoader(启动类加载器) ：最顶层的加载类，由 C++实现，负责加载 %JAVA_HOME%&#x2F;lib目录下的 jar 包和类或者被 -Xbootclasspath参数指定的路径中的所有类。</li>
<li>ExtensionClassLoader(扩展类加载器) ：主要负责加载 %JRE_HOME%&#x2F;lib&#x2F;ext 目录下的 jar 包和类，或被 java.ext.dirs 系统变量所指定的路径下的 jar 包。</li>
<li>AppClassLoader(应用程序类加载器) ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li>
</ol>
<h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p><img src="/2022/04/04/JVM/1647438628208-03b39124-9351-4ff0-ab47-61df7698891e.png" alt="类加载器"></p>
<p>全限定类名：就是类名全称，带包路径的用点隔开，例如: java.lang.String<br>非限定类名：String</p>
<p>为了防止内存中出现多个相同的字节码；因为如果没有双亲委派的话，用户就可以自己定义一个java.lang.String类，那么就无法保证类的唯一性。</p>
<p>自己写过String类能加载吗，之前的String是什么时候加载进去的？<br>不能加载，因为双亲委派机制，JVM 出于安全性的考虑，全限定类名相同的 String 是不能被加载的。<br>java.lang.String 会被顶级类加载器 BootstrapClassloader 加载。</p>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><h3 id="1-类加载检查"><a href="#1-类加载检查" class="headerlink" title="1 类加载检查"></a>1 类加载检查</h3><p>虚拟机遇到一条 new 指令时，首先将去检查是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>
<h3 id="2-分配内存"><a href="#2-分配内存" class="headerlink" title="2 分配内存"></a>2 分配内存</h3><p>对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。分配方式有 “指针碰撞” 和 “空闲列表” 两种，选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有整理功能决定。</p>
<p>内存分配的两种方式</p>
<p><img src="/2022/04/04/JVM/1647436415158-62c57e47-e0c6-43d3-ae19-f7bb65c339dc.png"></p>
<p><strong>内存分配并发问题</strong></p>
<p>在创建对象的时候有一个很重要的问题，就是线程安全。通常来讲，虚拟机采用两种方式来保证创建对象过程的线程安全：</p>
<ul>
<li>CAS</li>
<li>TLAB： 为每一个线程预先在 Eden 区分配一块内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用 CAS 进行内存分配</li>
</ul>
<h3 id="3-初始化零值"><a href="#3-初始化零值" class="headerlink" title="3 初始化零值"></a>3 初始化零值</h3><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用。</p>
<h3 id="4-设置对象头"><a href="#4-设置对象头" class="headerlink" title="4 设置对象头"></a>4 设置对象头</h3><p>Hotspot 虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据（哈希码、GC 分代年龄、锁状态标志等等），另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<blockquote>
<p>类元数据：加载阶段生成的”<strong>方法区</strong>的运行时数据结构“</p>
<p>类型指针：不是 Class 对象的引用</p>
</blockquote>
<h3 id="5-执行-init-方法"><a href="#5-执行-init-方法" class="headerlink" title="5 执行 init 方法"></a>5 执行 init 方法</h3><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<init> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <init> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</init></init></p>
<h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域：对象头、实例数据和对齐填充。</p>
<p>Hotspot 虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据（哈希码、GC 分代年龄、锁状态标志等等），另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<p>实例数据部分是对象真正存储的有效信息，也是在程序中所定义的各种类型的字段内容。</p>
<p>对齐填充部分仅仅起占位作用。 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>
<h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>Java 通过引用来访问对象，引用的具体实现方式有两种</p>
<ol>
<li><p>句柄： 如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，句柄池用于存放多个对象的句柄。句柄中包含了对象实例数据与类型数据各自的地址，而 reference 中存储的就是对象的句柄地址；</p>
<p> <img src="/2022/04/04/JVM/1647439292918-98859438-8a5f-47bc-93c6-eddb1d4717dc.png" alt="句柄"></p>
</li>
<li><p>直接指针： 如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息（到对象类型数据的指针），而 reference 中存储的直接就是对象的地址。</p>
<p> <img src="/2022/04/04/JVM/1647439292769-26b729bb-dc2c-4607-9dc9-bbf390dd0bc2.png" alt="直接指针"></p>
</li>
</ol>
<p>使用句柄来访问的好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式的好处是速度快，它节省了一次指针定位的时间开销。</p>
<p><strong>在 Hotspot 虚拟机中，使用直接指针的方法来实现引用，对象类型数据的指针被存放在对象头中。</strong></p>
<h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h2><p>首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p>
<ol>
<li>效率问题（遍历整个内存空间进行回收）</li>
<li>空间问题（标记清除后会产生大量不连续的碎片）</li>
</ol>
<h2 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h2><p>将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p>
<img src="/2022/04/04/JVM/1647431576601-544027ae-f696-4da9-abf5-29f0138a8663.png" alt="标记-复制算法" style="zoom: 67%;">

<h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><p>根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p>
<p><img src="/2022/04/04/JVM/1647431631421-c33e7513-6f19-41bc-8bfc-4ffd941070cd.png" alt="标记-整理算法"></p>
<h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>一般将 java 堆分为新生代和老年代，这样我们就可以<strong>根据各个年代的特点选择合适的垃圾收集算法</strong>。</p>
<ul>
<li>在新生代中，每次收集都会有大量对象死去，所以可以选择“标记-复制”算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集（只有少量存活对象需要复制）</li>
<li>老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</li>
</ul>
<h1 id="JVM-垃圾回收"><a href="#JVM-垃圾回收" class="headerlink" title="JVM 垃圾回收"></a>JVM 垃圾回收</h1><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作 GC 堆（Garbage Collected Heap）。</p>
<p><img src="/2022/04/04/JVM/1647430687276-153ea241-823f-4b57-a212-9f137ba30be8.png" alt="GC 堆划分"></p>
<h2 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a>判断对象是否存活</h2><p>垃圾回收前的第一步就是要判断哪些对象已经死亡（即不能再被任何途径使用的对象）。</p>
<h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。</p>
<p>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。 两个对象互相引用对方，导致它们的引用计数器都不为 0，于是引用计数算法无法通知 GC 回收器回收他们。</p>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>这个算法的基本思想就是通过一系列的称为 “GC Roots” 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。<br>哪些对象可以作为 GC Roots 呢？</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>本地方法栈（Native 方法）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>所有被同步锁持有的对象</li>
</ul>
<blockquote>
<p>对象已经死亡，就代表马上（不是最终）会被回收吗？</p>
<p>先进入回收队列，JVM 会开一个线程进行回收，除非在被回收之前，这个对象与引用链上的任何一个对象建立关联才不会被回收。</p>
</blockquote>
<h3 id="强引用、软引用、弱引用、虚引用"><a href="#强引用、软引用、弱引用、虚引用" class="headerlink" title="强引用、软引用、弱引用、虚引用"></a>强引用、软引用、弱引用、虚引用</h3><p>强引用，就是普通的对象引用关系</p>
<p>软引用，在内存不足时，系统会强制回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，会抛出内存溢出异常。</p>
<p>弱引用，当 JVM 进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。</p>
<p>虚引用是一种形同虚设的引用，在现实场景中用的不是很多，它主要用来跟踪对象被垃圾回收的活动。</p>
<h2 id="判断一个类是无用的类"><a href="#判断一个类是无用的类" class="headerlink" title="判断一个类是无用的类"></a>判断一个类是无用的类</h2><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？</p>
<p>类需要同时满足下面 3 个条件才能算是 “无用的类” ：</p>
<ul>
<li>该类所有的实例都已经被回收。</li>
<li>该类的类加载器实例已经被回收。（所以，在 JVM 生命周期内，由 jvm 自带的类加载器加载的类是不会被卸载的。但是由我们自定义的类加载器加载的类是可能被卸载的。）</li>
<li>该类的 Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p>
<h2 id="JVM-垃圾回收过程"><a href="#JVM-垃圾回收过程" class="headerlink" title="JVM 垃圾回收过程"></a>JVM 垃圾回收过程</h2><p>新生代 ( Young )、老年代 ( Old )，新生代默认占总空间的1&#x2F;3，老年代默认占 2&#x2F;3。</p>
<p>新生代有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1。</p>
<p>新生代的垃圾回收（Minor GC）选用复制算法。老年代的垃圾回收（Major GC）通常使用“标记-清理”或“标记-整理”算法。</p>
<p>Survivor 分区：空的 Survivor 分区被称为 Survivor To 分区，存在对象的分区称为 Survivor From 分区</p>
<p>Minor GC触发条件：当 Eden 区没有足够空间进行分配时，触发Minor GC。</p>
<p>垃圾回收过程：</p>
<ul>
<li>对象优先在 Eden 分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。在 Eden 区执行了第一次 GC 之后，存活的对象会被移动到其中一个 Survivor 分区；</li>
<li>Eden 区没有足够空间进行分配，再次 Minor GC，这时会采用复制算法，将 Eden 和 From 区一起清理，存活的对象会被复制到 To 区；</li>
<li>每移动一次，对象年龄加 1，对象年龄大于一定阀值会直接移动到老年代。<ul>
<li>固定阈值。通过参数 -XX:MaxTenuringThreshold 设置，默认为 15</li>
<li>动态阈值：Survivor 区相同年龄所有对象大小的总和 &gt; (Survivor 区内存大小 * TargetSurvivorRatio)时，大于或等于该年龄的对象直接进入老年代。<ul>
<li>-XX:TargetSurvivorRatio 指定，默认为 50%；</li>
<li>新的阈值为 min(该年龄，固定阈值）</li>
<li>计算方法：用数组记录各个年龄中所有对象的大小之和</li>
</ul>
</li>
</ul>
</li>
<li>Survivor 区内存不足会发生担保分配，超过指定大小的对象直接进入老年代。</li>
<li>老年代空间不足，进行Full GC，Full GC 清理整个内存堆，包括年轻代和老年代。</li>
</ul>
<h3 id="空间担保分配"><a href="#空间担保分配" class="headerlink" title="空间担保分配"></a>空间担保分配</h3><p>是因为新生代采用复制收集算法，假如大量对象在 Minor GC 后仍然存活，而 Survivor To 空间是比较小的，不足以实现复制，这时就需要老年代进行分配担保，把Survivor无法容纳的对象放到老年代。</p>
<p>如果发现老年代也放不下这些对象了，那怎么处理呢？其实JVM有一个老年代空间分配担保机制来保证对象能够进入老年代。</p>
<p>JDK 6 Update 24 之前，在发生 Minor GC 之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那这一次 Minor GC 可以确保是安全的。如果不成立，则虚拟机会先查看 <code>-XX:HandlePromotionFailure</code> 参数的设置值是否允许担保失败(Handle Promotion Failure);如果允许，那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的;如果小于，或者 <code>-XX: HandlePromotionFailure</code> 设置不允许冒险，那这时就要改为进行一次 Full GC。</p>
<p>在允许担保失败并尝试进行YoungGC后，可能会出现三种情况：<br>① YoungGC后，存活对象小于survivor大小，此时存活对象进入survivor区中<br>② YoungGC后，存活对象大于survivor大小，但是小于老年大可用空间大小，此时直接进入老年<br>代。<br>③ YoungGC后，存活对象大于survivor大小，也大于老年大可用空间大小，老年代也放不下这些<br>对象了，此时就会发生“Handle Promotion Failure”，就触发了 Full GC。如果 Full GC后，老年代<br>还是没有足够的空间，此时就会发生OOM内存溢出了。</p>
<p>JDK 6 Update 24 之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</p>
<h3 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h3><p>Minor GC：新生代的 GC。触发条件：当 Eden 区满时，触发 Minor GC。</p>
<p>Full GC: 整个堆的 GC，包括新生代、老年代和永久代（在 JDK 1.8及以后，永久代被移除，换为metaspace 元空间）。触发条件：</p>
<ul>
<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存。如果发现统计数据说之前Minor GC的平均晋升大小比目前old gen剩余的空间大，则不会触发Minor GC而是转为触发full GC。</li>
<li>老年代空间不够分配新的内存（或永久代空间不足，但只是JDK1.7有的，这也是用元空间来取代永<br>  久代的原因，可以减少Full GC的频率，减少GC负担，提升其效率）</li>
<li>由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转<br>  存到老年代，且老年代的可用内存小于该对象大小。</li>
<li>调用System.gc时，系统建议执行Full GC，但是不必然执行</li>
</ul>
<p>Full GC 清理整个堆，需要 stop the world 的时间更长</p>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>Serial、ParNew：新生代采用标记-复制算法，老年代采用标记-整理算法。</p>
<p>CMS：标记-清除算法</p>
<h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><p>Serial（串行）收集器。它的 “单线程” 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ “Stop The World” ），直到它收集结束。</p>
<p><img src="/2022/04/04/JVM/1647431959692-a9b1b24b-b425-4746-b5c9-566932bb41bf.png"></p>
<p>优点：单线程收集效率高，</p>
<p>缺点：单线程收集，stop the world 造成停顿，实时性差</p>
<h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><p>ParNew 收集器其实就是 Serial 收集器的多线程版本。仍然要暂停其他所有的工作线程（ “Stop The World” ），直到它收集结束。</p>
<p><img src="/2022/04/04/JVM/1647432020975-d07110a4-443c-44a4-b3b1-be12ac618e08.png"></p>
<h3 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h3><p>CMS（Concurrent Mark Sweep）收集器设计目的是为了实现低停顿。</p>
<p>它的运作过程分为四个步骤：</p>
<ul>
<li><strong>初始标记</strong>： 暂停所有的其他线程，进行可达性分析 ；</li>
<li>并发标记： 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li>
<li><strong>重新标记</strong>：重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li>
<li><strong>并发清除</strong>： 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li>
</ul>
<p><img src="/2022/04/04/JVM/1647432336054-17d3daab-8419-4f7e-9a18-0968c1ad7cb8.png"></p>
<p>优点：并发收集、低停顿。（初始标记和重新标记阶段仍然需要 stop the world，暂停其他所有工作线程，造成停顿。</p>
<p>缺点：</p>
<ul>
<li>对 CPU 资源敏感；(并发，需要多 cpu，让用户线程和 GC 线程运行在不同 cpu 上）</li>
<li>无法处理浮动垃圾；</li>
<li>“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Concurrency</title>
    <url>/2022/04/07/Concurrency/</url>
    <content><![CDATA[<p>同步、锁机制</p>
<span id="more"></span>

<p>线程同步的方式<br>1、临界区：拥有临界区的线程可以访问被保护起来的资源或代码段，<br>2、事件：事件机制，则允许一个线程在处理完一个任务后，主动唤醒另外一个线程执行任务。<br>3、互斥量：互斥对象和临界区对象非常相似，只是其允许在进程间使用，而临界区只限制与同一进程的<br>各个线程之间使用，但是更节省资源，更有效率。<br>4、信号量：当需要一个计数器来限制可以使用某共享资源的线程数目时（多个资源整体作为一个共享资源），可以使用“信号量”对象。<br>区别：<br>互斥量可以跨越进程使用，临界区不行，但创建互斥量需要的资源更多，所以如果只为了在进程内部是用的话使用临界区会带来速度上的优势并能够减少资源占用量。因为互斥量是跨进程的互斥量一旦被创建，就可以通过名字打开它。<br>互斥量，信号量，事件都可以实现不同进程的线程同步操作</p>
<p>什么是上下文切换?<br>线程在执行过程中会有自己的运行条件和状态（也称上下文），比如程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。<br>● 发生系统调用，主动让出 CPU，比如调用了 sleep(), wait() 等。调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。<br>● 时间片用完，因为操作系统要防止一个线程或者进程长时间占用CPU导致其他线程或者进程饿死。</p>
<p>多线程&#x2F;多进程的目的：</p>
<p>对于单 CPU 来说，只是提供一种程序同时执行的错觉。</p>
<p>对于单 CPU 来说，如果没有 IO 阻塞操作（即读取磁盘操作），单线程执行多个任务，总时间更短，因为多线程单CPU无法并发执行，会导致线程切换，带来额外开销；如果有 IO 阻塞操作，多线程可以利用阻塞时间，因此多线程可能更快，应该综合考虑阻塞时间的利用和线程切换的消耗，看哪个大</p>
<p>多线程&#x2F;多进程可以利用多 CPU</p>
<p>Redis没有IO阻塞操作，因此设计成了单线程。（抛弃了并发的效率）</p>
<p>其一是机器内存大小，内存大小关系到Redis存储的数据量其二是网络带宽，这点我仔细说一下Redis客户端执行一条命令分为四个过程：发送命令、命令排队、命令执行、返回结果</p>
<p>而其中发送命令+返回结果这一过程被称为Round Trip Time（RTT，往返时间）</p>
<p>Redis的客户端和服务端可能部署在不同的机器上。例如客户端在北京，Redis服务端在上海，两地直线距离约为1300公里，那么1次RTT时间&#x3D;1300×2&#x2F;（300000×2&#x2F;3）&#x3D;13毫秒（光在真空中传输速度为每秒30万公里，这里假设光纤为光速的2&#x2F;3），那么客户端在1秒内大约只能执行80次左右的命令，这就和Redis的高并发高吞吐特性背道而驰啦！所以一般情况下，都是就近部署！</p>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p><img src="/2022/04/07/Concurrency/1647569931834-e7d0bf33-43a6-4c34-8a33-8be6345076d0.jpeg" alt="思维导图"></p>
<h3 id="1-乐观锁-VS-悲观锁"><a href="#1-乐观锁-VS-悲观锁" class="headerlink" title="1 乐观锁 VS 悲观锁"></a><strong>1 乐观锁 VS 悲观锁</strong></h3><p>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</p>
<p>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</p>
<h3 id="2-自旋锁-VS-适应性自旋锁"><a href="#2-自旋锁-VS-适应性自旋锁" class="headerlink" title="2 自旋锁 VS 适应性自旋锁"></a><strong>2 自旋锁 VS 适应性自旋锁</strong></h3><p>在许多场景中，同步资源的锁定时间很短（同步代码块执行需要的时间很短），为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。</p>
<p>如果有<strong>多个处理器</strong>，能够让两个或以上的线程同时执行，我们就可以让后面那个请求锁的线程不放弃CPU 的执行时间，看看持有锁的线程是否很快就会释放锁。而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p>
<p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。</p>
<p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>
<h3 id="3-公平锁-VS-非公平锁"><a href="#3-公平锁-VS-非公平锁" class="headerlink" title="3 公平锁 VS 非公平锁"></a><strong>3 公平锁 VS 非公平锁</strong></h3><p>公平锁：</p>
<p>多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。</p>
<p>优点是等待锁的线程不会饿死。缺点是与比非公平锁相比，唤起线程的开销大，因为新的线程都是先被阻塞再被唤醒。</p>
<p>非公平锁：</p>
<p>新的线程直接尝试获取锁，如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，获取不到才会到等待队列的队尾等待。</p>
<p>优点是可以减少唤起线程的开销，因为线程有几率不阻塞直接获得锁。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p>
<h3 id="4-可重入锁-VS-非可重入锁"><a href="#4-可重入锁-VS-非可重入锁" class="headerlink" title="4 可重入锁 VS 非可重入锁"></a><strong>4 可重入锁 VS 非可重入锁</strong></h3><h3 id="5-独享锁-VS-共享锁"><a href="#5-独享锁-VS-共享锁" class="headerlink" title="5 独享锁 VS 共享锁"></a><strong>5 独享锁 VS 共享锁</strong></h3><p>独享锁，是指该锁一次只能被一个线程所持有。如果线程对数据加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。例如 synchronized 和 ReentrantLock</p>
<p>共享锁是指该锁可被多个线程所持有。如果线程对数据 A 加上共享锁后，则其他线程只能对 A 再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p>
<p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p>
<p>独享锁也叫排他锁、互斥锁、写锁，共享锁也叫做读锁。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>I/O 模型</title>
    <url>/2022/04/07/I-O-model/</url>
    <content><![CDATA[<span id="more"></span>
<p> select、poll 和 epoll 之间的区别</p>
<p>（1）select：时间复杂度 O(n)<br>select 仅仅知道有 I&#x2F;O 事件发生，但并不知道是哪几个流，所以只能无差别轮询所有流，找出能读出数<br>据或者写入数据的流，并对其进行操作。所以 select 具有 O(n) 的无差别轮询复杂度，同时处理的流越<br>多，无差别轮询时间就越长。<br>（2）poll：时间复杂度 O(n)<br>poll 本质上和 select 没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个 fd 对应的设备状<br>态，但是它没有最大连接数的限制，原因是它是基于链表来存储的。<br>（3）epoll：时间复杂度 O(1)<br>epoll 可以理解为 event poll，不同于忙轮询和无差别轮询，epoll 会把哪个流发生了怎样的 I&#x2F;O 事件通<br>知我们。所以说 epoll 实际上是事件驱动（每个事件关联上 fd）的（触发式）。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟化</title>
    <url>/2022/04/05/Virtualization/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="虚拟地址空间"><a href="#虚拟地址空间" class="headerlink" title="虚拟地址空间"></a>虚拟地址空间</h1><p>以 32 位操作系统举例，它的寻址空间为 4G &#x3D; 2 的 32 次方，一个字节大小的内存单元对应一个地址</p>
<p>为什么叫虚拟，因为物理内存一共就 4G，但操作系统为<strong>每一个进程都分配了4G的内存空间，这个内存空间是虚拟的</strong>。以 linux 操作系统为例，每个进程 4G 的虚拟内存，将最高的 1G 字节供内核使用，称为内核空间，而将较低的 3G 字节，供各个进程使用，称为用户空间。</p>
<blockquote>
<p>如果你在一个程序中打印出一个地址，那只是一个虚拟地址。虚拟地址只是提供地址如何在内存中分布的假象，只有操作系统（和硬件）才知道物理地址。</p>
</blockquote>
<h2 id="虚拟地址空间的构成"><a href="#虚拟地址空间的构成" class="headerlink" title="虚拟地址空间的构成"></a>虚拟地址空间的构成</h2><p>内核空间和用户空间</p>
<p><img src="/2022/04/05/Virtualization/1642770176746-362621fb-2a65-447d-a7e6-d0f10f18e8f6.png" alt="内核空间和用户空间"></p>
<p><strong>用户空间</strong></p>
<p>代码：编译链接生成的可执行文件是汇编指令，汇编指令以二进制形式装载到内存中，每条指令可用几个字节存储。</p>
<p>栈：存放临时变量。通过栈的推入和弹出处理临时变量</p>
<p>堆：非局部变量生命周期较长，通常很多个方法中都会用到，由程序员自主使用内存 API 函数分配回收。</p>
<p>静态区（全局区）：存储全局变量和静态变量，分为初始化和未初始化两个分区。</p>
<blockquote>
<p>图示堆栈生长方式只是一种约定，当多个线程（threads）在地址空间中共存时，就没有像这样分配空间的好办法了</p>
<p><strong>虚拟空间地址连续，会映射到不连续的物理空间</strong></p>
</blockquote>
<p><strong>内核空间</strong></p>
<p>与进程相关的数据结构。例如<strong>页表、进程控制块、内核栈</strong>等</p>
<p>操作系统是一个程序，但不能称作进程。它管理着进程，进程是有生命周期的，操作系统是永存的。<strong>操作系统的运行也同样要占用CPU</strong></p>
<p>在操作系统这个程序中，为了跟踪每个进程的状态，使用了如下数据结构</p>
<ul>
<li>进程控制块（PCB， process control block）</li>
<li>进程列表（process list）</li>
</ul>
<p>如下是一个进程控制块，进程控制块包括了上下文信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 寄存器上下文（register context）</span><br><span class="line">// the registers xv6 will save and restore </span><br><span class="line">// to stop and subsequently restart a process </span><br><span class="line">struct context &#123; </span><br><span class="line">  int eip; </span><br><span class="line">  int esp; </span><br><span class="line">  int ebp; </span><br><span class="line">  </span><br><span class="line">  int ebx; </span><br><span class="line">  int ecx; </span><br><span class="line">  int edx; </span><br><span class="line">  </span><br><span class="line">  int esi; </span><br><span class="line">  int edi; </span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line">// 进程状态枚举</span><br><span class="line">enum proc_state &#123; UNUSED, EMBRYO, SLEEPING, </span><br><span class="line">                  RUNNABLE, RUNNING, ZOMBIE &#125;; </span><br><span class="line"> </span><br><span class="line">// the information xv6 tracks about each process </span><br><span class="line">// including its register context and state </span><br><span class="line">struct proc &#123; </span><br><span class="line">	// 内存设置</span><br><span class="line">  char *mem;                   // Start of process memory </span><br><span class="line">  uint sz;                     // Size of process memory </span><br><span class="line">  </span><br><span class="line">  char *kstack;                // Bottom of kernel stack </span><br><span class="line">                               // for this process </span><br><span class="line">                              </span><br><span class="line">  enum proc_state state;       // Process state </span><br><span class="line">  int pid;                     // Process ID </span><br><span class="line">  struct proc *parent;         // Parent process </span><br><span class="line">  void *chan;                  // If non-zero, sleeping on chan </span><br><span class="line">  int killed;                  // If non-zero, have been killed </span><br><span class="line">  </span><br><span class="line">  struct file *ofile[NOFILE];  // Open files</span><br><span class="line">  struct inode *cwd;           // Current directory </span><br><span class="line">  </span><br><span class="line">  struct context context;      // // 上下文切换 </span><br><span class="line">  struct trapframe *tf;        // Trap frame（栈帧） for the current interrupt</span><br><span class="line">                               // 栈帧也是一个包含多个寄存器的结构体</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="内核空间和用户空间的切换"><a href="#内核空间和用户空间的切换" class="headerlink" title="内核空间和用户空间的切换"></a>内核空间和用户空间的切换</h3><p><strong>模式切换</strong>：仅仅需要寄存器进栈出栈，不会导致CPU中的数据缓存失效、MMU中的页表缓存失效</p>
<p><strong>进程切换</strong>：不仅需要寄存器进栈出栈，还会使CPU中的数据缓存失效、MMU中的页表缓存失效（缓存失效是必须的，因为要切换到另一个进程的地址空间）</p>
<blockquote>
<p>缓存失效的后果：对内存的访问变得低效</p>
<p>代码里面具有各个语句和各个变量的虚拟地址，当进程切换之后，页表也会更新，根据自己进程的页表来找物理内存</p>
</blockquote>
<p>为什么虚拟地址空间切换会比较耗时</p>
<p>当进程切换后页表也要进行切换，页表切换后 TLB 就失效了，页表缓存失效导致命中率降低，那么虚拟地址转换为物理地址就会变慢，表现出来的就是程序运行会变慢，而线程切换则不会导致TLB失效，因为线程无需切换地址空间。</p>
<p>内核和用户程序共享地址空间：发生系统调用时进行的是模式切换而非进程切换。</p>
<p>不同的进程共享内核空间：进程A切换到进程B时把进程信息PCBA压入内核栈，进程B切换到进程C时把进程信息PCBB压入内核栈，然后要恢复的时候依次从内核栈弹出PCBB、PCBA。同一个内核栈。用户空间通过页表切换（页表信息也可当作处于PCB中），而内核空间不会。</p>
<p>在执行系统调用陷入内核之后，这些内核代码所使用的栈并不是原先用户空间中的栈，而是一个内核空间的栈，这个称作进程的内核栈。</p>
<p>用户空间通过异常&#x2F;中断进入内核空间的时候都需要保存现场，也就是保存发生异常&#x2F;中断时的所有通用寄存器的值到每个进程特有的进程内核栈（一块内存），然后将即将执行的进程的寄存器的值从另一块内存中恢复到相应寄存器中（区分内存和CPU寄存器）。</p>
<h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><p>调度：进程是资源管理的基本单位，线程是程序执行的基本单位。</p>
<p>系统开销：创建或撤销进程时，系统都要为之分配或回收系统资源，如内存空间，I&#x2F;O设备等，OS所付出的开销显著大于在创建或撤销线程时的开销，进程切换的开销也远大于线程切换的开销</p>
<p>进程切换分两步：</p>
<ol>
<li>切换页表以使用新的地址空间，一旦去切换上下文，处理器中所有已经缓存的内存地址一瞬间都作废了。</li>
<li>切换内核栈和硬件上下文（例如进程控制块和线程控制块）。</li>
<li>对于线程切换，第1步是不需要做的（因为每个进程都有自己的虚拟地址空间，而线程是共享所在进程的虚拟地址空间的，因此同一个进程中的线程进行线程切换时不涉及虚拟地址空间的转换），第2步是进程和线程切换都要做的。</li>
</ol>
<h3 id="进程-API"><a href="#进程-API" class="headerlink" title="进程 API"></a>进程 API</h3><p>程序中调用时发生系统调用</p>
<p>fork</p>
<ul>
<li><p>一个现有进程可以调用 fork() 创建一个新进程，该新进程被称为<strong>子进程</strong>（child process），调用fork的进程称为<strong>父进程</strong>。</p>
</li>
<li><p>子进程通过拷贝的方式，获得 此时的 父进程地址空间副本（包括堆、栈等资源）。</p>
</li>
<li><ul>
<li>父进程处于等待 fork 返回的状态。因此，子进程复制之后，在 fork() 被调用之前的代码不会被执行，且两个进程都停留在 fork 函数中，等待返回。因此fork函数会返回两次，一次是在父进程中返回，另一次是在子进程中返回<ul>
<li>子进程中返回 0，而父进程中返回子进程 ID。</li>
</ul>
</li>
</ul>
</li>
<li><p>作用：运行相同程序的拷贝</p>
</li>
</ul>
<p>exec</p>
<ul>
<li><p>exec指的是一个函数簇，包括execlp()、execv()和execvp()等</p>
</li>
<li><p>函数原型：</p>
<p>  int execvp(const char *file, char *const argv[]); &#x2F;&#x2F; file为需要运行的文件名，argv[]为输入的参数列表</p>
</li>
<li><p>给定可执行程序的名称及该程序需要的参数后，exec() 会从该程序中加载代码和静态数据，并用它 <strong>覆写</strong> 自己的代码段（以及静态数据），堆、栈及其他内存空间也会被重新<strong>初始化</strong>。然后操作系统就执行该程序，将参数 argv 传递给该进程。——并没有创建新进程，而是直接将当前运行的程序替换为另一个程序</p>
</li>
<li><p>调用了 exec() 的程序，exec() 之后的语句不会被执行</p>
</li>
</ul>
<h2 id="虚拟地址到物理地址的映射"><a href="#虚拟地址到物理地址的映射" class="headerlink" title="虚拟地址到物理地址的映射"></a>虚拟地址到物理地址的映射</h2><p>一个基本的负责地址转换的<strong>内存管理单元</strong>（Memory Management Unit，MMU）需要包含：<strong>基址寄存器、界限寄存器</strong>。</p>
<ul>
<li>基本的映射方法：基址 + 偏移</li>
<li>每个进程分配的空间有限，并且不能访问别人的空间，因此需要<strong>界限寄存器</strong></li>
</ul>
<p>如果只使用基址和界限，为进程分配一块连续的物理内存，容易产生<strong>内部碎片</strong>（internal fragmentation），指的是<strong>已经分配的内存单元内部有未使用的空间</strong>（即碎片），造成了浪费。主要是堆栈空间冗余。</p>
<p>进程需要把用到的基址和界限寄存器中的内容保存在内存中，放在某种每个进程都有的结构中，例如进程控制块（Process Control Block，PCB）中。类似地，当操作系统恢复执行某个进程时（或第一次执行），也必须给基址和界限寄存器设置正确的值。</p>
<h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><p>为了减少内部碎片，可以采用<strong>分段</strong>（segmentation）的方法为进程分配内存。分段法将用户空间看成几个段的组合，每个段具有自己的基址和界限，不同段分配的空间可以不连续。</p>
<p><img src="/2022/04/05/Virtualization/1643438704868-7d431f3d-de31-497f-8400-36fd33dbc504.png" alt="段寄存器"></p>
<p>注意到栈向低地址生长，地址范围 28 KB ~ 26 KB。其他段向高地址生长。如果试图访问的虚拟地址不在段内，会发生段异常（segmentation violation）或段错误（segmentation fault）</p>
<p>分段只能减少内部碎片，而不能完全避免内部碎片，总得多分配一点保证程序运行。</p>
<p>分段的问题</p>
<ul>
<li><p>分段操作相关的寄存器在每次 cpu 模式切换时需要存储和恢复</p>
</li>
<li><p>段不连续且不均匀分配，导致物理内存在各个位置充满大小不一致的碎片，因而很难将物理内存分配给新的段，或扩大已有的段。这种问题被称为<strong>外部碎片</strong>。</p>
<blockquote>
<p>解决方法：紧凑、空闲列表管理</p>
</blockquote>
</li>
</ul>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>为虚拟空间分配物理内存时以页（page）为单位分配。即将虚拟空间分成多个页，每个页对应一个物理帧。</p>
<p>页表（page table）保存了<strong>页</strong>（<strong>虚拟</strong>地址空间）和物理帧（<strong>物理内存</strong>空间）的映射关系。</p>
<blockquote>
<p>物理帧不是硬盘空间&#x2F;外存的单元 </p>
</blockquote>
<p>虚拟页面号（virtual page number，VPN）和页内的偏移量（offset）组成一个虚拟地址。假设进程的虚拟地址空间是 64 字节，每页大小 16 字节，共 4 个页。那么虚拟地址需要用 6 位描述，前两位是虚拟页号（VPN），用来区分不同的页，后四位区分一个页中的不同字节。例如，虚拟地址 &#x3D; 010101，VPN&#x3D;1，offset&#x3D;5，表示第 1 页第5 个字节。</p>
<p>操作系统会将物理内存分成多个物理帧，物理帧和帧内的偏移量组成一个物理地址。假设第 1 页对应的物理帧号是 7，如图所示。则虚拟地址 010101 对应的物理地址是 112+5 &#x3D; 117 &#x3D; 1110101（图中物理帧 0<del>15，16</del>31，…）</p>
<p><img src="/2022/04/05/Virtualization/1643442576051-58a6712b-62dd-4570-abec-25a272edc855.png" alt="虚拟页与物理帧的对应关系"></p>
<p>页表是一个数据表，进程创建时由操作系统为其生成对应页表（分配物理内存空间）。页表由页表项（<strong>PTE</strong>）组成，第 i 个页表项存储了 VPN &#x3D; i 的虚拟页的信息，包括：</p>
<table>
<thead>
<tr>
<th>物理帧号 PFN</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>有效位</td>
<td>是否为该虚拟页分配物理帧</td>
</tr>
<tr>
<td>存在位（present bit）</td>
<td>表示该页是否被调入内存中（有可能暂存硬盘），&#x3D;1表示被调入内存</td>
</tr>
<tr>
<td>脏位（dirty bit）</td>
<td>表示页面在调入内存后是否被修改过，供时钟置换算法及调出页面时是否要回写到外存后是否被</td>
</tr>
<tr>
<td>参考位（reference bit，也被称为访问位，accessed bit）</td>
<td>记录本页一段时间内的访问次数，或记录本页多久未被访问</td>
</tr>
</tbody></table>
<blockquote>
<p>如果有效位是1，该PTE中就会存储物理内存中相应的物理页的起始地址。如果有效位是0，且PTE中的地址为null，这表示这个虚拟页还未被分配，而如果有效位是0且PTE中有地址，那么这个地址指向该虚拟页在磁盘上的起始位置</p>
</blockquote>
<p><strong>页表在内核空间中</strong>。如果页表在用户空间，那么用户就可能自己修改页表，从而访问任何内存（其他进程专用的、操作系统专用的）</p>
<p>页式访问机制会产生两个问题</p>
<ul>
<li><p>内存访问性能：访问一个内存单元需要2次内存访问，第一次访问页表，确定数据的物理地址，第二次访问数据。访问页表的步骤可以加速。</p>
</li>
<li><p>页表大小：页表可能很大，占据大量内存，导致内存利用效率降低。</p>
</li>
</ul>
<p><strong>快表</strong></p>
<p>为了改善内存访问性能，利用局部性原理加速访问页表的步骤——将常访问的页面保存至 CPU 缓存，该缓存称为<strong>地址变换高速缓存</strong>（Translation Look-aside Buffer，TLB），又可称为快表。配置快表后，CPU 访问页面会先去查看快表内是否存在，然后再去查看主存的页表。</p>
<p>例：某一页式系统，其页表存放在主存中：</p>
<p>(1) 如果对主存的一次存取需要 1.5μs，试问实现一次页面访问时存取时间是多少？</p>
<p>答：页式访问需要访存两次，一次页表，一次数据，所以需要 1.5∗2&#x3D;3μs。</p>
<p>(2)如果系统有快表且其平均命中率为 85%，而页标项在快表查询的时间可忽略不计，试问此时的存取时间为多少？</p>
<p>答：快表命中时访存一次，未命中时访存两次，所以需要 0.85∗1.5+0.15∗3&#x3D;1.725μs。（0.85概率找到页表项，0.15概率没有找到页表项，此时需要到主存的页表再去找）</p>
<p><strong>多级页表</strong></p>
<p>页表大小问题可以通过多级页表的方法优化。</p>
<p>分割：将庞大的页表分成多张较小的页表，并设置一张页目录表。逻辑地址的虚页号进一步划分为页目录号和虚页号，页目录号用于查询页表，虚页号用于查询物理帧号。</p>
<p>按需调入：进程执行开始时只需要将页目录表调入内存，然后次级页表和页面可以在后面执行需要时再调入。同时，</p>
<p>假设有 256 个虚拟页，可以拆分为 16*16 个部分，以 16 个页表项为一页（这里是页表页，而不是之前的虚拟页）。虚页号此时是 相对虚页号，即 16 个页 0<del>15，而非绝对虚页号，即 256 个页 0</del>255</p>
<h4 id="页面置换算法-x2F-cache淘汰算法"><a href="#页面置换算法-x2F-cache淘汰算法" class="headerlink" title="页面置换算法&#x2F;cache淘汰算法"></a>页面置换算法&#x2F;cache淘汰算法</h4><p>什么是交换空间？</p>
<p>用于与内存换入换出的硬盘空间。操作系统把物理内存进行分页。当内存资源不足时，把某些页的内容转移至硬盘上的一块空间上，以释放内存空间。硬盘上的那块空间叫做交换空间（swap space）,而这一过程被称为交换。物理内存和交换空间的总容量就是虚拟内存的可用容量</p>
<p>在程序运行过程中，如果要访问的页面不在内存中（根据页表项的存在位判断），就发生缺页中断从而将该页调入内存中。此时</p>
<ul>
<li><strong>如果内存已无空闲空间</strong>，CPU通知操作系统将暂时不用的页面 <strong>换出</strong> 到外存，将腾出的内存分配给要访问的页面，要访问的页面在外存，需要将其重新 <strong>换入</strong> 内存。</li>
<li>如果内存有空闲物理页帧，操作系统将页面装入内存，并页表项填入页帧号，存在位修改为1</li>
</ul>
<blockquote>
<p>生成进程时，就要为所有页面分配物理帧，也会发生缺页中断。因此，要访问的页面不在内存中必定在外存，不会临时再生成</p>
</blockquote>
<p>页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）</p>
<p><strong>局部页面置换</strong>：置换页面的选择范围仅限于 当前进程 占用的物理页面内（进程内）</p>
<p><strong>最佳</strong>（OPT, Optimal replacement algorithm）</p>
<p>所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。</p>
<p>是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。</p>
<p>举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：</p>
<p>7，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1 </p>
<p>开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长</p>
<p><strong>最近最少使用</strong>（LRU, Least Recently Used）</p>
<p>虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最少使用的页面换出。</p>
<p>为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时</p>
<ul>
<li>页面在链表中存在，将这个页面移到链表表头。</li>
<li>页面在链表中不存在，将其插入到表头</li>
</ul>
<p>这样就能保<strong>证链表表尾的页面是最近最久未访问的</strong>。</p>
<p>实现方式：LinkedHashMap（JAVA）,使用哈希表作为缓存，对应的实际上是硬件 TLB</p>
<p>举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列：</p>
<p>4，7，0，7，1，0，1，2，1，2，6</p>
<p>上方是表头，设页数上限为5。链表变化过程如图</p>
<p><img src="/2022/04/05/Virtualization/1643691165540-3cc3a1fe-245c-4ffb-997f-90d3987f7e9c.png" alt="LRU 过程示意"></p>
<p><strong>LRU 和 LFU 的优缺点</strong></p>
<p>LRU </p>
<p>优点：实现简单，通常具有高命中率</p>
<p>缺点：如果一些不常使用的数据一次性出现过多，那么链表表头都是无用的数据，从而会导致缓存命中率低下</p>
<p>LFU 缺点</p>
<ul>
<li>需要为每个记录项维护频率信息，带来额外开销</li>
<li>对突发性的稀疏流量无力，因为前期经常访问的记录已经占用了缓存，偶然的流量不太可能会被保留下来，而且过去的一些大量被访问的记录在将来也不一定会使用上，这样就一直把“坑”占着了。</li>
</ul>
<p>LFU优点：如果数据的分布在一段时间内是固定的话，那么LFU可以达到最高的命中率</p>
<p><strong>先进先出</strong></p>
<p>使用队列，最新进入的页面放在表尾，最早进入的页面放在表头。当缺页中断时，淘汰表头的页面并把新调入的页面加到表尾。</p>
<ul>
<li>问题 可能会把有用的页面淘汰掉。（即此时加入的页面之前已存在）</li>
<li>改进 第二次机会算法（SCR，Second Chance Replacement Policy），基于 second chance 位维护最早页面指针</li>
</ul>
<p>第二次机会算法</p>
<p>数据结构：链表、最早页面指针</p>
<p>每个页面有一个 second chance 位，也叫做引用位。上面叫做 参考位&#x2F;访问位</p>
<p>当一个页面被二次引用，它的 second chance 位设置为1。这表示该页面后面还有可能会被引用到，所以下次置换先跳过这个页面，也就是再给它一次机会留在内存中。这样可以减少页面置换。</p>
<p>步骤</p>
<ul>
<li><p>引用一个界面时，先用一个 遍历指针 从头到尾查找页面在链表中是否存在</p>
</li>
<li><ul>
<li>如果到尾部、未查找到、且有剩余空间，加入页面，它的 second chance 被设置为 0，最早页面指针后移一位<ul>
<li>如果已经分配物理内存&#x2F;在链表中，它的 second chance 被设置为1</li>
<li>如果到尾部、未查找到、且无剩余空间。需要替换内存中的一个页面，从 <strong>最早页面指针</strong> 往后查找可以被替换的页面：</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>如果页面的 second chance 是1，那么置为0，最早页面指针后移一位；<ul>
<li>如果页面的 second chance 是0，那么将这个页面置换出去，最早页面指针后移一位。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>注意下图中 最早页面指针（蓝色箭头） 的变化</p>
<p><img src="/2022/04/05/Virtualization/1643693169495-5747d18e-5424-4b59-9b6c-09bdb5590391.png" alt="第二次机会算法"></p>
<h3 id="段页式"><a href="#段页式" class="headerlink" title="段页式"></a>段页式</h3><p><strong>分页主要用于实现虚拟内存，从而获得更大的地址空间；分段主要是为了使程序和数据可以被划分为逻辑上独立的地址空间并且有助于共享和保护</strong></p>
<p>虚拟地址空间首先划分为若干个段，每段都有自己的段号，然后每段分成若干个大小固定的页，相应的内存划分为和页面大小的物理帧。</p>
<p>逻辑地址结构</p>
<p>段页式的逻辑地址由段号(segment)、虚页号(virtual page number) 和页内偏移(offset) 组成</p>
<p>硬件支持</p>
<p>段页式存储管理方式的硬件支持包括段表和页表。段表项代表进程的一个段，段表项包括段号、段长，但<strong>段基址实际上是页表基址</strong>。</p>
<p>例如，段基址指向页表的第 2 个页表项，虚页号为 3，则找到第 5 个页表项。虚页号是相对虚页号，而非绝对虚页号。</p>
<h1 id="虚拟-CPU"><a href="#虚拟-CPU" class="headerlink" title="虚拟 CPU"></a>虚拟 CPU</h1><p>采用时分共享，每个进程轮流运行一段时间，进程并发执行，产生有多个 CPU 的假象</p>
<p>安全：在进程占用 CPU 时，对它的权限进行限制；</p>
<p>可控：操作系统能控制进程的运行。时分共享 CPU 方式存在的问题 —— <strong>如果一个进程在CPU 上运行，这就意味着操作系统没有运行。</strong></p>
<p>手段—— <strong>CPU 双模式</strong>（安全）、<strong>控制权转移</strong>（可控）</p>
<h2 id="CPU-双模式"><a href="#CPU-双模式" class="headerlink" title="CPU 双模式"></a>CPU 双模式</h2><p>将操作系统的运行状态分为用户态和内核态，主要是为了<strong>对访问能力进行限制</strong>，防止随意进行一些比较危险的操作导致系统的崩溃</p>
<p><strong>用户模式</strong></p>
<ul>
<li>用户空间——应用程序的代码和数据</li>
<li>可执行非特权指令</li>
</ul>
<p><strong>内核模式</strong></p>
<ul>
<li><p>内核空间——存放的是操作系统内核代码和数据（如进程控制块和进程列表等）</p>
</li>
<li><p><strong>可执行特权指令，可以访问一切内存和寄存器</strong></p>
</li>
<li><p>切换到内核模式的方式——执行系统调用</p>
<p>在用户模式执行系统调用的方式——调用操作系统提供的 API，例如读取文件、创建和销毁进程、与其他进程通信，以及分配更多内存</p>
<p>陷阱表（trap table）记录了相关处理程序的位置。</p>
<p><strong>执行系统调用将发生什么？</strong></p>
<p>执行陷阱指令，进入内核模式</p>
<p>保存进程信息（例如进程控制块）到内核栈<br>- 查找陷阱表，执行对应处理程序<br>执行从陷阱返回指令，从内核栈恢复寄存器，回到用户模式</p>
</li>
</ul>
<p>当陷入内核，执行的都属于操作系统的程序，相当于操作系统接管了 CPU</p>
<p><img src="https://cdn.nlark.com/yuque/__puml/19d56db61d9fe6cdb199e9e3e11ab4e7.svg"></p>
<p>Intel 的 x86 处理器 可以运行在 ring0 ~ ring3 四个不同的权限级别。不过 Linux 和 Windows 只利用了其中的两个运行级别：</p>
<p>内核模式，对应 ring0 级<br>用户模式，对应 ring3 级</p>
<h2 id="控制权转移"><a href="#控制权转移" class="headerlink" title="控制权转移"></a>控制权转移</h2><p>协作方式——程序在最后执行系统调用交还控制权</p>
<p>非协作方式——利用时钟中断重新获得控制权</p>
<p>中断的处理过程</p>
<ol>
<li>保护现场：将当前执行程序的相关数据保存在寄存器中，然后入栈。</li>
<li>开中断：以便执行中断时能响应较高级别的中断请求。</li>
<li>中断处理</li>
<li>关中断：保证恢复现场时不被新中断打扰</li>
<li>恢复现场：从堆栈中按序取出程序数据，恢复中断前的执行状态</li>
</ol>
<h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><h3 id="调度策略相关概念"><a href="#调度策略相关概念" class="headerlink" title="调度策略相关概念"></a>调度策略相关概念</h3><p><strong>抢占与非抢占</strong></p>
<p>抢占式：当有比正在运行的进程<strong>优先级</strong>更高的进程就绪时，系统可强行剥夺当前运行进程的 CPU 使用权，提供给更高优先级的进程使用。</p>
<p>非抢占式：某一进程被调度运行后，除非自身原因导致不能运行，否则一直运行下去。</p>
<p><strong>I&#x2F;O 密集型和 CPU 密集型进程</strong></p>
<p>I&#x2F;O 密集型：需要频繁地进行 I&#x2F;O 操作的进程。 I&#x2F;O 操作会阻塞进程</p>
<p>CPU 密集型：需要大量的 CPU 时间进行计算。</p>
<h3 id="调度指标"><a href="#调度指标" class="headerlink" title="调度指标"></a>调度指标</h3><ul>
<li><p><strong>周转时间</strong>（Turnaround Time）：每个进程从提出请求到运行完成的时间。运行完成时刻 - 任务到达时刻</p>
</li>
<li><p>加权周转时间（Turnaround Time With Weight）：周转时间与实际运行时间的比值。</p>
</li>
<li><p>等待时间：进程处于等待CPU调度的时间之和。</p>
</li>
<li><p><strong>响应时间</strong>：从提出请求到第一次回应的时间。</p>
</li>
<li><p>公平性（Fairness）：保证每个进程都能获得一定程度的CPU时间。</p>
</li>
</ul>
<h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>批处理系统没有太多的用户操作，在该系统中，调度算法（即以下四种算法）目标是保证吞吐量和<strong>周转时间</strong>。</p>
<p><strong>先来先服务</strong>（first-come first-serverd，FCFS）</p>
<ul>
<li><strong>非抢占式</strong>，按照请求的顺序进行调度。</li>
<li>有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行</li>
</ul>
<p><strong>最短作业优先</strong>（shortest job first，SJF）</p>
<ul>
<li><strong>非抢占式</strong>，按运行时间最短（假设操作系统知道每个任务用时）的顺序进行调度。区别于 STCF</li>
<li>有利于短作业，但不利于长作业。因为如果一直有短作业到来，那么长作业永远得不到调度。</li>
</ul>
<p><strong>最短完成时间优先</strong>（Shortest Time-to-Completion First，STCF）</p>
<ul>
<li><strong>最短作业优先的抢占式版本</strong>。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，<strong>则挂起当前进程，运行新的进程</strong>。否则新的进程等待。</li>
</ul>
<p><strong>最高响应比优先</strong>（Highest Response Ratio Next, HRRN)</p>
<p>是对 FCFS 和 SJF 的综合平衡，调度时计算每个进程的响应比 R ，总是选择 R 最高的进程执行，属于<strong>非抢占式</strong>调度算法。</p>
<p><img src="/2022/04/05/Virtualization/1643024036695-ef32003d-a133-42c3-9347-7c8e035b9784.png"></p>
<p>当等待时间相同时，则运行时间越短响应比越高，实现短作业优先（SJF)</p>
<p>当运行时间相同时，等待时间越长响应比越高，实现先来先服务（FCFS）</p>
<p>实际上等价于将调度队列的各个任务按照 R 排序，R 大的在队头。</p>
<h4 id="交互式系统"><a href="#交互式系统" class="headerlink" title="交互式系统"></a>交互式系统</h4><p>交互式系统有大量的用户交互操作，在该系统中调度算法（即以下三种算法）的目标是<strong>减少响应时间</strong>。即</p>
<p><strong>时间片轮转</strong>（Round Robin，RR）</p>
<p>将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，<strong>并将它送往就绪队列的末尾</strong>，同时继续把 CPU 时间分配给队首的进程。</p>
<p>时间片轮转算法的<strong>效率</strong>和<strong>时间片的大小</strong>有很大关系：</p>
<ul>
<li><ul>
<li>时间片太小，会导致进程频繁切换，浪费资源。<ul>
<li>时间片过长，以至于所有进程都能在一个时间片内执行完毕，则 RR 算法退化成为 FCFS 算法。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>优先级调度</strong>（Highest Priority First，HPF）</p>
<p>为每个进程分配一个优先级，按优先级进行调度。</p>
<p>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p>
<p><strong>多级反馈队列</strong>（Multi-Level Feedback Queue，MLFQ）</p>
<p>基本思想</p>
<ul>
<li>减少周转时间：通过先执行短工作来实现（SJF），然而，操作系统通常不知道工作要运行多久</li>
<li>减少响应时间：轮转。轮转算法虽然降低了响应时间，周转时间却很差。</li>
</ul>
<p>关键问题：没有工作长度的先验信息，不知道工作要运行多久，如何设计一个能同时减少响应时间和周转时间的调度程序——也就是，让短工作先执行，并且要加入轮转</p>
<p>MLFQ 将刚到的工作假设为短工作，并赋予最高优先级。如果确实是短工作，则很快会执行完毕，否则将被慢慢移入低优先级队列，而这时该工作也被认为是长工作了。通过这种方式，MLFQ近似于SJF</p>
<p>多级反馈队列算法(MLFQ)是 RR 算法和 HPF 算法的综合平衡，<strong>动态调整进程的优先级和时间片大小</strong>，实现思想如下：</p>
<ol>
<li>设置多个就绪队列，并为每个队列赋予不同的优先级，第 1 级队列的优先级最高，第 2 级队列次之，其余队列的优先级逐次降低； 优先级越高的队列，每个进程的运行时间片越小（当作短任务）。即便进程被阻塞，也正常计算其占用时间</li>
<li>当一个新进程进入内存后，首先放入第 1 级队列的末尾，按 FCFS 的原则排队等待调度。当该进程执行时，如果其能在时间片内完成便撤离系统；如果它在一个时间片结束未完成，该进程进入第 2 级队列按照 FCFS 的原则等待调度，以此类推。对于最后一级队列，进程执行一个时间片结束未完成会回到该队列的队尾。（如图中的环，如果前面队列的任务过多，可能导致饥饿问题）</li>
<li>仅当第 1 级队列为空时，调度程序才调度第 2 级队列的进程进行执行，以此类推。</li>
</ol>
<p><img src="/2022/04/05/Virtualization/1643033924079-f75ee3ea-89da-44bb-bcfb-b1b8055447d1.png"></p>
<p>优点：</p>
<p>短作业可以在前面的队列内完成，长作业可以得到部分执行。</p>
<p>交互型作业通常较短，系统只要能使其第1级队列所规定的时间片内完成，即可使终端用户感到满意。</p>
<p>不必人为估计进程的执行时间。</p>
<p>一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要切换 100 次。</p>
<p>假设多级队列从队列 1 开始分配的时间片为 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要切换 7 次。1+2+4+8+16+32+64</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>JavaPractice</title>
    <url>/2022/04/05/JavaPractice/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="多线程共享变量"><a href="#多线程共享变量" class="headerlink" title="多线程共享变量"></a>多线程共享变量</h1><p>在多线程访问共享对象和数据时候大致可以分为两大类。</p>
<p>1：如果每个线程执行的代码相同，可以使用同一个runnable对象，这个runnable对象中有共享变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MulteThreadlShareData &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ShareData shareData = new ShareData();</span><br><span class="line">        new Thread(shareData).start();</span><br><span class="line">        new Thread(shareData).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class ShareData implements Runnable&#123;</span><br><span class="line">        int count = 100;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while(count&gt;0)&#123;</span><br><span class="line">                // 这里可能有多个线程同时到达</span><br><span class="line">            	synchronized(this) &#123;</span><br><span class="line">            		if(count == 0) // 如果多个线程进入 while，保证这里的 count 一定是正数</span><br><span class="line">                    	break;</span><br><span class="line">            		count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+&quot;this count: &quot;+count); </span><br><span class="line">            	&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果每个线程对一个共享变量执行的操作不同，这时候需要用不同的Runnable对象。</p>
<ul>
<li>将共享数据封装成一个对象，然后将这个对象传递给各个Runnable对象</li>
<li>将Runnable对象作为一个类的内部类，共享数据作为这个类的成员变量，每个线程对共享数据的操作方法也封装在外部类，以便实现对数据的各个操作的同步和互斥，作为内部类的各个Runnable对象调用外部类的这些方法。</li>
</ul>
<p> 例：银行存取款</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Acount &#123;</span><br><span class="line"> </span><br><span class="line">	 private int money;</span><br><span class="line">	 public Acount(int money)&#123;</span><br><span class="line">	   this.money=money;</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 public synchronized void getMoney(int money)&#123;</span><br><span class="line">	  while(this.money&lt;money)&#123;		  </span><br><span class="line">		   System.out.println(&quot;取款：&quot;+money+&quot; 余额：&quot;+this.money+&quot; 余额不足，正在等待存款......&quot;);</span><br><span class="line">		   try&#123; wait();&#125; catch(Exception e)&#123;&#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  this.money=this.money-money;</span><br><span class="line">	  System.out.println(&quot;取出：&quot;+money+&quot; 还剩余：&quot;+this.money);</span><br><span class="line">	 </span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 public synchronized void setMoney(int money)&#123;</span><br><span class="line">	 </span><br><span class="line">	  try&#123; Thread.sleep(10);&#125;catch(Exception e)&#123;&#125;</span><br><span class="line">	  this.money=this.money+money;</span><br><span class="line">	  System.out.println(&quot;新存入：&quot;+money+&quot; 共计：&quot;+this.money);</span><br><span class="line">	  notify();</span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 public static void main(String args[])&#123;</span><br><span class="line">		  Acount Acount=new Acount(0);</span><br><span class="line">		  Bank b=new Bank(Acount);</span><br><span class="line">		  Consumer c=new Consumer(Acount);</span><br><span class="line">		  new Thread(b).start();</span><br><span class="line">		  new Thread(c).start();</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line">//存款类</span><br><span class="line">class Bank implements Runnable &#123;</span><br><span class="line">		Acount Acount;</span><br><span class="line">		public Bank(Acount Acount)&#123;</span><br><span class="line">			this.Acount=Acount;</span><br><span class="line">		&#125;</span><br><span class="line">		public void run()&#123;</span><br><span class="line">			while(true)&#123;</span><br><span class="line">				 int temp=(int)(Math.random()*1000);</span><br><span class="line">				 Acount.setMoney(temp);	 </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">//取款类</span><br><span class="line">class Consumer implements Runnable &#123;</span><br><span class="line">		Acount Acount;</span><br><span class="line">		public Consumer(Acount Acount)&#123;</span><br><span class="line">			this.Acount=Acount;</span><br><span class="line">		&#125;</span><br><span class="line">		public void run()&#123;</span><br><span class="line">		while(true)&#123;		 </span><br><span class="line">			int temp=(int)(Math.random()*1000);</span><br><span class="line">			Acount.getMoney(temp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="多线程打印abc"><a href="#多线程打印abc" class="headerlink" title="多线程打印abc"></a>多线程打印abc</h1><p>3个线程循环打印ABC，其中A打印3次，B打印2次，C打印1次，循环打印2轮</p>
<p>print 对象中的 num 作为条件变量，决定哪个线程被唤醒。</p>
<p>下面的count是否要改成volatile?</p>
<p>由于对print对象加锁，因此由Synchronized 和 ReentrantLock 保证了print对象，包括它的count属性的可见性</p>
<h2 id="1-Synchronized"><a href="#1-Synchronized" class="headerlink" title="1 Synchronized"></a>1 Synchronized</h2><h3 id="1-1-互斥"><a href="#1-1-互斥" class="headerlink" title="1.1 互斥"></a>1.1 互斥</h3><p>如果只执行线程A，并且改写代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void PrintA()&#123;</span><br><span class="line">        // 循环打印2轮</span><br><span class="line">		for (int j = 0; j &lt; 2; )&#123;</span><br><span class="line">            synchronized(this)&#123;</span><br><span class="line">            	System.out.println(&quot;x&quot;);</span><br><span class="line">                while(num == 1)&#123;</span><br><span class="line">                	</span><br><span class="line">                //打印3次</span><br><span class="line">                for (int i = 0; i &lt; 3; i++) &#123; </span><br><span class="line">                    System.out.println(&quot;A&quot;);  </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //打印A线程执行完，设置num=2，则</span><br><span class="line">                num = 2;  </span><br><span class="line">                </span><br><span class="line">                ++j; // 注意把 ++j 移到这里</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>为什么会无线输出”x”？</p>
<p>如果把++j移回for()里</p>
<p>久会输出</p>
<p>x<br>A<br>A<br>A<br>y<br>x</p>
<p>然后停止。</p>
<p>不能认为是，先获取锁，进入了同步块，然后如果num&#x3D;1，就执行while，若num!&#x3D;1，就离开while</p>
<p>实际上，synchronized 只是起修饰的作用。这个代码的意思是，while语句</p>
<p>注意把 ++j 移到同步块中，否则只执行一次AAABBC。这是因为？？？？</p>
<p>因为可能别的线程先运行了？</p>
<p>包括1.2的this.notifyAll()也是在同步块中，因为？？</p>
<p>从共享变量修改的角度，while可以改成if，因为只有同步块才可能修改num</p>
<p>采用互斥，需要认为地控制线程运行的顺序。无法像wait notify那样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">	public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">		</span><br><span class="line">		int num = 1;//当前正在执行线程的标记。初值为1，让线程 A 先执行</span><br><span class="line">		ABCPrint print = new ABCPrint(num); // print对象作为不同线程的共享变量，不同线程获取print对象的锁从而实现同步。主要包括：互斥地修改共享变量 print.num，互斥地打印</span><br><span class="line">		</span><br><span class="line">		Thread threadA = new Thread(new RunnableA(print));</span><br><span class="line">		Thread threadB = new Thread(new RunnableB(print));</span><br><span class="line">		Thread threadC = new Thread(new RunnableC(print));</span><br><span class="line">		threadA.start();</span><br><span class="line">		Thread.sleep(500); // 保证初始线程按照ABC的启动顺序</span><br><span class="line">		threadB.start();</span><br><span class="line">		Thread.sleep(500);</span><br><span class="line">		threadC.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class RunnableA implements Runnable&#123;</span><br><span class="line">	private ABCPrint print;</span><br><span class="line">	public RunnableA(ABCPrint print) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.print = print;	</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;		</span><br><span class="line">		print.PrintA();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class RunnableB implements Runnable&#123;</span><br><span class="line">	private ABCPrint print;</span><br><span class="line">	public RunnableB(ABCPrint print) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.print = print;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;		</span><br><span class="line">		print.PrintB();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class RunnableC implements Runnable&#123;</span><br><span class="line">	private ABCPrint print;</span><br><span class="line">	public RunnableC(ABCPrint print) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.print = print;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;		</span><br><span class="line">		print.PrintC();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class ABCPrint &#123;</span><br><span class="line">	private int num;//当前正在执行线程的标记</span><br><span class="line">	public ABCPrint(int num) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void PrintA()&#123;</span><br><span class="line">        // 循环打印2轮</span><br><span class="line">		for (int j = 0; j &lt; 2; )&#123;</span><br><span class="line">            synchronized(this)&#123;</span><br><span class="line">                while(num == 1)&#123;</span><br><span class="line">                    </span><br><span class="line">                //打印3次</span><br><span class="line">                for (int i = 0; i &lt; 3; i++) &#123; </span><br><span class="line">                    System.out.println(&quot;A&quot;);  </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //打印A线程执行完，设置num=2，则</span><br><span class="line">                num = 2;  </span><br><span class="line">                ++j; // 注意把 ++j 移到这里</span><br><span class="line">            	&#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void PrintB()&#123;</span><br><span class="line">		for (int j = 0; j &lt; 2; )&#123;</span><br><span class="line">            synchronized(this)&#123;</span><br><span class="line">                while(num == 2)&#123;</span><br><span class="line">                    </span><br><span class="line">                for (int i = 0; i &lt; 2; i++) &#123; </span><br><span class="line">                    System.out.println(&quot;B&quot;);  </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                num = 3;  </span><br><span class="line">                ++j; </span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void PrintC()&#123;</span><br><span class="line">		for (int j = 0; j &lt; 2; )&#123;</span><br><span class="line">            synchronized(this)&#123;</span><br><span class="line">                while(num == 3)&#123;</span><br><span class="line">                </span><br><span class="line">                System.out.println(&quot;C&quot;);  </span><br><span class="line"></span><br><span class="line">                num = 1;  </span><br><span class="line">                ++j; </span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h3 id="1-2-使用-wait-和-notify"><a href="#1-2-使用-wait-和-notify" class="headerlink" title="1.2 使用 wait() 和 notify()"></a>1.2 使用 wait() 和 notify()</h3><p>不使用 wait() 和 notify()，而仅仅使用锁进行互斥，是可以实现功能的。但是由于阻塞线程无法马上被唤醒，并不是一个实际推荐的写法。</p>
<p>使用 while，保证被唤醒后满足继续运行的条件，否则就继续等待</p>
<p>：例如线程 A 不能保证是被线程 B 唤醒。在下面的实现中，使用 notifyAll()，则线程 A 会唤醒 B 和 C</p>
<p>：while 和 notifyAll() 是互相配合的，如果只使用 notify()，在这种多个等待线程的情况下，可能会死锁</p>
<p>使用 wait() 和 notify() 注意：</p>
<ul>
<li><p><strong>调用 wait() 和 notify() 的对象是什么</strong></p>
</li>
<li><p><strong>线程被唤醒后会尝试重新获得锁</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public synchronized String getTask() &#123;</span><br><span class="line">    while (queue.isEmpty()) &#123;</span><br><span class="line">    	// 当一个线程执行到getTask()方法内部的while循环时，它必定已经获取到了this锁</span><br><span class="line">        // 释放this锁，与 synchronized 加锁的对象一致</span><br><span class="line">        this.wait();</span><br><span class="line">        // 重新获取this锁</span><br><span class="line">    &#125;</span><br><span class="line">    return queue.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意到 while 语句中的条件变为：!&#x3D;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//当前正在执行线程的标记。初值为1，让线程 A 先执行</span></span><br><span class="line">		<span class="type">ABCPrint</span> <span class="variable">print</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ABCPrint</span>(num); <span class="comment">// print对象作为不同线程的共享变量，不同线程获取print对象的锁从而实现同步。主要包括：互斥地修改共享变量 print.num，互斥地打印</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableA</span>(print));</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableB</span>(print));</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">threadC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableC</span>(print));</span><br><span class="line">		threadA.start();</span><br><span class="line">		Thread.sleep(<span class="number">500</span>); <span class="comment">// 保证初始线程按照ABC的启动顺序</span></span><br><span class="line">		threadB.start();</span><br><span class="line">		Thread.sleep(<span class="number">500</span>);</span><br><span class="line">		threadC.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableA</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ABCPrint print;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">RunnableA</span><span class="params">(ABCPrint print)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.print = print;	</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;		</span><br><span class="line">		print.PrintA();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableB</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ABCPrint print;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">RunnableB</span><span class="params">(ABCPrint print)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.print = print;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;		</span><br><span class="line">		print.PrintB();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableC</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ABCPrint print;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">RunnableC</span><span class="params">(ABCPrint print)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.print = print;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;		</span><br><span class="line">		print.PrintC();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABCPrint</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> num;<span class="comment">//当前正在执行线程的标记</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ABCPrint</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 循环打印2轮</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(num != <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//打印3次</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123; </span><br><span class="line">                    System.out.println(<span class="string">&quot;A&quot;</span>);  </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//打印A线程执行完，唤醒其他所有线程</span></span><br><span class="line">                num = <span class="number">2</span>;  </span><br><span class="line">                <span class="built_in">this</span>.notifyAll();  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintB</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(num != <span class="number">2</span>)&#123; <span class="comment">// 检查被唤醒后是否满足条件</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;B&quot;</span>);  </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                num = <span class="number">3</span>;  </span><br><span class="line">                <span class="built_in">this</span>.notifyAll();  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintC</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)<span class="comment">//表示 循环打印2轮</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(num != <span class="number">3</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;C&quot;</span>);  </span><br><span class="line"></span><br><span class="line">                num = <span class="number">1</span>;  </span><br><span class="line">                <span class="built_in">this</span>.notifyAll();  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h2 id="2-ReentrantLock"><a href="#2-ReentrantLock" class="headerlink" title="2 ReentrantLock"></a>2 ReentrantLock</h2><p>Condition提供的await()、signal()、signalAll()原理和synchronized锁对象的wait()、notify()、notifyAll()是一致的，并且其行为也是一样的：</p>
<ul>
<li>await() 会释放当前锁，进入等待状态；</li>
<li>signal() 会唤醒某个等待线程；</li>
<li>signalAll() 会唤醒所有等待线程；</li>
<li><strong>线程被唤醒后会尝试重新获得锁</strong>。</li>
</ul>
<p>此外，和 tryLock() 类似，await()可以在等待指定时间后，如果还没有被其他线程通过signal()或signalAll()唤醒，可以自己醒来：</p>
<h3 id="2-1-互斥"><a href="#2-1-互斥" class="headerlink" title="2.1 互斥"></a>2.1 互斥</h3><p>共享变量 print 中的 Lock 对象被多线程共享。用共享的 ReentrantLock 修改 Synchronized 块的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABCPrint</span> &#123;</span><br><span class="line">	<span class="comment">// 多线程共享同一个 Lock 对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> num;<span class="comment">//当前正在执行线程的标记</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ABCPrint</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintA</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>;) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			    lock.lock();</span><br><span class="line">			    <span class="keyword">while</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;<span class="comment">//打印3次</span></span><br><span class="line">					    System.out.println(<span class="string">&quot;A&quot;</span>);  </span><br><span class="line">			        &#125;</span><br><span class="line">			    	<span class="comment">//打印A线程执行完 ，通知打印B线程</span></span><br><span class="line">	                num = <span class="number">2</span>;  </span><br><span class="line">	                j++; <span class="comment">// 注意把 ++j 移到这里</span></span><br><span class="line">			    &#125;</span><br><span class="line">			&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			    lock.unlock();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintB</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>;)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">	            lock.lock();</span><br><span class="line">			    <span class="keyword">while</span>(num == <span class="number">2</span>)&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;B&quot;</span>);  </span><br><span class="line">					&#125;</span><br><span class="line">			        <span class="comment">//打印B线程执行完 ，通知打印C线程</span></span><br><span class="line">                    num = <span class="number">3</span>;  </span><br><span class="line">                    j++;	    </span><br><span class="line">		        &#125;</span><br><span class="line">	        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	        	lock.unlock();</span><br><span class="line">	        &#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintC</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>;) &#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">			    lock.lock();</span><br><span class="line">			    <span class="keyword">while</span>(num == <span class="number">3</span>)&#123;</span><br><span class="line">			       System.out.println(<span class="string">&quot;C&quot;</span>); </span><br><span class="line">			       <span class="comment">//打印C线程执行完 ，通知打印A线程</span></span><br><span class="line">	               num = <span class="number">1</span>;  </span><br><span class="line">	               j++;</span><br><span class="line">	            &#125;  </span><br><span class="line">			&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			    lock.unlock();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用-Condition"><a href="#2-2-使用-Condition" class="headerlink" title="2.2 使用 Condition"></a>2.2 使用 Condition</h3><p>不需要使用 while 检查被唤醒后是否满足条件，是因为 Condition 能够唤醒指定的线程。与 wait() notify() 不一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ABCPrint &#123;</span><br><span class="line">	// 共享变量包括：lock、condition</span><br><span class="line">	private static final Lock lock = new ReentrantLock();</span><br><span class="line">	private Condition condition1 = lock.newCondition();</span><br><span class="line">	private Condition condition2 = lock.newCondition();</span><br><span class="line">	private Condition condition3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">	private int num;//当前正在执行线程的标记</span><br><span class="line">	public ABCPrint(int num) &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void PrintA()&#123;</span><br><span class="line">        // 循环打印2轮</span><br><span class="line">		for (int j = 0; j &lt; 2; j++)&#123;</span><br><span class="line">            </span><br><span class="line">			lock.lock();</span><br><span class="line">			</span><br><span class="line">			try &#123;</span><br><span class="line">				//1.判断</span><br><span class="line">				if(num != 1)&#123;</span><br><span class="line">					condition1.await();</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				//2.打印</span><br><span class="line">				for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">					System.out.println(&quot;A&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				//唤醒，包括两个步骤：设置num、唤醒指定的线程B</span><br><span class="line">				num = 2;</span><br><span class="line">				condition2.signal(); </span><br><span class="line">			&#125; catch (Exception e) &#123;</span><br><span class="line">				// TODO: handle exception</span><br><span class="line">			&#125;finally&#123;</span><br><span class="line">				lock.unlock();</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void PrintB()&#123;</span><br><span class="line">		for (int j = 0; j &lt; 2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">			lock.lock();</span><br><span class="line">			</span><br><span class="line">			try &#123;</span><br><span class="line">				if(num != 2)&#123;</span><br><span class="line">					condition2.await();</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">					System.out.println(&quot;B&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				num = 3;</span><br><span class="line">				condition3.signal();</span><br><span class="line">			&#125; catch (Exception e) &#123;</span><br><span class="line">				// TODO: handle exception</span><br><span class="line">			&#125;finally&#123;</span><br><span class="line">				lock.unlock();</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public void PrintC()&#123;</span><br><span class="line">		for (int j = 0; j &lt; 2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">			lock.lock();</span><br><span class="line">			</span><br><span class="line">			try &#123;</span><br><span class="line">				if(num != 3)&#123;</span><br><span class="line">					condition3.await();</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				for (int i = 0; i &lt; 1; i++) &#123;</span><br><span class="line">					System.out.println(&quot;C&quot;);</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(&quot;---------------------------&quot;);// 两轮的分隔符</span><br><span class="line"></span><br><span class="line">				num = 1;</span><br><span class="line">				condition1.signal();</span><br><span class="line">			&#125; catch (Exception e) &#123;</span><br><span class="line">				// TODO: handle exception</span><br><span class="line">			&#125;finally&#123;</span><br><span class="line">				lock.unlock();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<h2 id="3-AtomicInteger"><a href="#3-AtomicInteger" class="headerlink" title="3 AtomicInteger"></a>3 AtomicInteger</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">	 </span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		new ABCPrint(&quot;A&quot;,3).start();//A打印3次</span><br><span class="line">		new ABCPrint(&quot;B&quot;,2).start();</span><br><span class="line">		new ABCPrint(&quot;C&quot;,1).start();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class ABCPrint extends Thread &#123;</span><br><span class="line">	//打印次数，不是共享变量</span><br><span class="line">	private int count;</span><br><span class="line"> </span><br><span class="line">	private final String str[] = &#123; &quot;A&quot;, &quot;B&quot;, &quot;C&quot; &#125;;</span><br><span class="line">	</span><br><span class="line">	private final static AtomicInteger  atomCount= new AtomicInteger();// 共享变量</span><br><span class="line"> </span><br><span class="line">	public ABCPrint(String name,int count) &#123;</span><br><span class="line">		// name：线程的名字</span><br><span class="line">		this.setName(name);</span><br><span class="line">		this.count = count;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		while (true) &#123;</span><br><span class="line">			// 循环满2轮退出打印</span><br><span class="line">			if (atomCount.get() / 3 == 2) &#123;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">			synchronized (atomCount) &#123;</span><br><span class="line">				// 顺序打印A、B、C</span><br><span class="line">				// getName()实际上是this.getName()，得到当前线程的名字</span><br><span class="line">				if (str[atomCount.get() % 3].equals(getName())) &#123; </span><br><span class="line">					atomCount.getAndIncrement();//自增</span><br><span class="line">					</span><br><span class="line">					//打印次数</span><br><span class="line">					for (int i = 0; i &lt; count; i++) &#123;</span><br><span class="line">						System.out.println(getName());</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					//表示一轮打印结束 方便观察打印下分隔符</span><br><span class="line">					if (&quot;C&quot;.equals(getName())) &#123;</span><br><span class="line">						System.out.println(&quot;================================&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">					// 当前线程打印打印完成后唤醒其它线程</span><br><span class="line">					atomCount.notifyAll();</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">					// 非顺序线程wait()</span><br><span class="line">					try &#123;</span><br><span class="line">						atomCount.wait();</span><br><span class="line">					&#125; catch (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-Semaphore"><a href="#4-Semaphore" class="headerlink" title="4 Semaphore"></a>4 Semaphore</h2><p>信号量（Semaphore）线程同步机制，当调用acquire()时，内部计数器数值增加；调用release()时，内部计数器递减；计数器值不能小于0，如果等于0，acquire()方法被阻塞，需要等待其他线程调用release()方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">	</span><br><span class="line">	 public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">	        new ThreadA(3).start();</span><br><span class="line">	        new ThreadB(2).start();</span><br><span class="line">	        new ThreadC(1).start();</span><br><span class="line">	   &#125;</span><br><span class="line">	 </span><br><span class="line">	//以A开始的信号量,初始信号量数量为1</span><br><span class="line">    private static Semaphore A = new Semaphore(1);</span><br><span class="line">    //B、C信号量,A完成后开始,初始信号数量为0</span><br><span class="line">    private static Semaphore B = new Semaphore(0);</span><br><span class="line">    private static Semaphore C = new Semaphore(0);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    static class ThreadA extends Thread &#123;</span><br><span class="line">    	private int count;</span><br><span class="line">        public ThreadA(int count) &#123;</span><br><span class="line">			super();</span><br><span class="line">			this.count = count;</span><br><span class="line">		&#125;</span><br><span class="line">		@Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">                    A.acquire();// A获取信号执行,A信号量减1,当A为0时将无法继续获得该信号量</span><br><span class="line">                    for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">                    	   System.out.print(&quot;A&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">                 </span><br><span class="line">                    B.release();// B释放信号，B信号量加1（初始为0），此时可以获取B信号量</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    static class ThreadB extends Thread &#123;</span><br><span class="line">    	private int count;</span><br><span class="line">        public ThreadB(int count) &#123;</span><br><span class="line">			super();</span><br><span class="line">			this.count = count;</span><br><span class="line">		&#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">                    B.acquire();</span><br><span class="line">                    for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">                    	System.out.print(&quot;B&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">                    C.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    static class ThreadC extends Thread &#123;</span><br><span class="line">    	private int count;</span><br><span class="line">        public ThreadC(int count) &#123;</span><br><span class="line">			super();</span><br><span class="line">			this.count = count;</span><br><span class="line">		&#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">                    C.acquire();</span><br><span class="line">                    for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">                    	System.out.println(&quot;C&quot;);</span><br><span class="line">					&#125;</span><br><span class="line">                    A.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2022/04/06/MySQL/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构，便于对数据进行定位。</p>
<p>例如，对于students表，如果要经常根据score列进行查询，就可以对score列创建索引：</p>
<p>ALTER TABLE students</p>
<p>ADD INDEX idx_score (score);</p>
<p>使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。</p>
<h2 id="索引有哪些优缺点？"><a href="#索引有哪些优缺点？" class="headerlink" title="索引有哪些优缺点？"></a>索引有哪些优缺点？</h2><p>优点：提高了查询效率</p>
<p>缺点：</p>
<ul>
<li><p>时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增删改的时候，索引也要更新；</p>
</li>
<li><p>空间方面：索引需要占物理空间。</p>
</li>
</ul>
<h2 id="MySQL-的索引类型"><a href="#MySQL-的索引类型" class="headerlink" title="MySQL 的索引类型"></a>MySQL 的索引类型</h2><ol>
<li><p>从数据结构上来划分：BTree索引（B-Tree或B+Tree索引），Hash索引</p>
</li>
<li><p>从应用层次来分：普通索引，唯一索引，复合索引。</p>
<p> 普通索引：即一个索引只包含单个列，一个表可以有多个单列索引<br> 唯一索引：索引列的值必须唯一，但允许有空值<br> 复合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</p>
</li>
<li><p>根据中数据的物理顺序与键值的逻辑（索引）顺序关系： 聚集索引，非聚集索引</p>
</li>
</ol>
<h2 id="索引数据结构选择-B-树的原因"><a href="#索引数据结构选择-B-树的原因" class="headerlink" title="索引数据结构选择 B+ 树的原因"></a>索引数据结构选择 B+ 树的原因</h2><p>B+ 树与 B 树相比：</p>
<ul>
<li><p>B+ 树的磁盘读写代价更低：B+ 树的内部节点没有关键字对应的数据信息，因此其内部节点相对 B 树更小。如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多（相当于分叉数可以更多），一次性读入内存中可以查找的关键字也就越多，相对 IO 读写次数就降低了。</p>
<blockquote>
<p>读写磁盘会阻塞线程，因为耗时较长。而读写内存不会阻塞。</p>
<p>MySQL 使用磁盘存储数据，需要考虑磁盘读写性能，而 Redis 不需要</p>
<p>IO 读写次数：每次根据孩子指针来查找磁盘元素都是一次对磁盘的读取操作。因此，实际上，树的高度越小，IO 读写次数也越小</p>
</blockquote>
<blockquote>
<p>结点存储数据信息的方式：</p>
<p>假设表：</p>
<p>name score</p>
<p>A         99</p>
<p>B         84</p>
<p>如果建立 score 列的索引，则结点的值为 score 字段的值，叶子结点存放数据信息，可以存放 score 对应的记录，也可以存放指向对应记录的指针</p>
</blockquote>
</li>
<li><p>B+ 树的数据存储在叶子结点中，并且叶子节点构成了双向链表，适合区间查询。而 B 树若要查找区间数据，对于区间内的每个数据，都要二分搜索一次 B 树。</p>
</li>
</ul>
<p>B+ 树与红黑树相比：</p>
<ul>
<li>虽然查找复杂度都是 O(h&#x3D;logN)，但是B+ 树是多叉树，相同结点个数情况下，B+ 树的高度比红黑树小。从O(h) 来看，B+ 树的查找效率更高。从 O(logN) 来看，实际上底数不同</li>
<li>红黑树不适合区间查询</li>
</ul>
<p>B+ 树与 Hash 相比：</p>
<p>Hash 的优点：适合等值查询，没有哈希冲突时，等值查询的速度很快</p>
<p>Hash 的缺点：</p>
<ul>
<li><p>Hash 是无序的数据结构，不支持区间查询，也无法利用索引进行排序</p>
</li>
<li><p>不支持多列联合索引。对于联合索引，从哈希的角度来说，多个键值统一映射到一个 hash 值，并不会有层次。Hash 索引在计算 Hash 值的时候是将索引键合并后再一起计算 Hash 值，不会针对每个索引单独计算 Hash 值。因此不支持部分索引列的匹配查找；</p>
</li>
<li><p>如果有大量重复键值，存在哈希碰撞问题 。</p>
</li>
</ul>
<p>跳表</p>
<p><img src="/2022/04/06/MySQL/v2-d679e616dd3312da3d002d555e3c0b7c_720w.jpg" alt="跳表内部存储结构"></p>
<p>跳表空间复杂度：O(N)，各层的结点个数可以看成等比数列，最底层存放了所有结点</p>
<p>支持区间查询：O(logN) 找到起点或终点然后遍历即可</p>
<p>Redis 作者的话：跳表更容易实现，代码可读性好</p>
<p>跳表的出现时间比 mysql innodb 晚</p>
<h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><p>可以使用多个字段同时建立一个索引，叫做联合索引。</p>
<p>ALTER TABLE students</p>
<p>ADD INDEX idx_name_score (name, score);</p>
<p>这里表示两个单独的索引列name和score。</p>
<h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>最左前缀原则的意思是：</p>
<ul>
<li>在联合索引中，如果想要命中索引，需要按照建立索引时的字段顺序挨个使用才能命中索引。</li>
<li>注意范围查询和等值查询的影响。mysql 会一直向右匹配直到遇到范围查询（&gt;、&lt;、between、like）就停止匹配，比如 a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4 如果建立 (a,b,c,d) 顺序的索引，d &#x3D; 4 是用不到索引的，如果建立 (a,b,d,c) 的索引则可以用到。</li>
</ul>
<p>具体原因为：</p>
<ul>
<li><p>假设现在建立了”name，age，school”的联合索引，那么索引的排序为：先按照name排序，如果name相同，则按照age排序，如果age的值也相等，则按照school进行排序。</p>
<p>  当进行查询时，此时索引仅仅按照 name 严格有序，因此必须首先使用 name 字段进行等值查询，之后对于匹配到的列而言，其按照age字段严格有序，此时可以使用age字段用做索引查找，以此类推。</p>
</li>
<li><p>当走到 c &gt; 3，实际上取出的行仅在 c 相等的行，d有序，而 c 不相等的行，d 不保证有序。也就是说，此时的索引按照 d 列是无序的，无法使用索引。</p>
</li>
</ul>
<blockquote>
<p>总结：mysql 的查询优化器会对等值查询（查询 &#x3D; ）进行分析，使用正确的顺序进行查询</p>
<p>假设对 student 表建立了 (name, cid) 的联合索引，</p>
<p>执行查询语句为</p>
<p>SELECT * FROM student WHERE cid&#x3D;1 AND name&#x3D;‘小红’;</p>
<p>虽然查询顺序并不按照 (name, cid)，但是由于对 name 字段进行的是等值查询，因此 mysql 查询优化器会判断在 name 字段进行等值查询时，对于相同的 name，表已经按照 cid 有序排列，可以命中索引。因此，该语句能正确返回结果。</p>
<p>执行查询语句为</p>
<p>SELECT * FROM student WHERE cid&#x3D;1;</p>
<p>无法返回结果。单纯的 cid 是无序的。</p>
</blockquote>
<h2 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h2><p>在 InnoDB 里，索引 B+ 树的叶子节点存储了整行数据的是主键索引，也被称之为聚簇索引，即将数据存储与索引放到了一块，找到索引也就找到了数据。</p>
<p>聚簇索引与非聚簇索引的区别：</p>
<p>非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的<br>主键（行号） </p>
<p>对于InnoDB来说，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集<br>索引查找数据的过程，我们称为回表。第一次索引一般是顺序IO，回表的操作属于随机IO。需要回</p>
<p>表的次数越多，即随机IO次数越多，我们就越倾向于使用全表扫描 。<br>通常情况下， 主键索引（聚簇索引）查询只会查一次，而非主键索引（非聚簇索引）需要回表查询<br>多次。当然，如果是覆盖索引的话，查一次即可<br>注意：MyISAM无论主键索引还是二级索引都是非聚簇索引，而InnoDB的主键索引是聚簇索引，二<br>级索引是非聚簇索引。我们自己建的索引基本都是非聚簇索引。</p>
<h2 id="创建索引时需要注意什么？"><a href="#创建索引时需要注意什么？" class="headerlink" title="创建索引时需要注意什么？"></a>创建索引时需要注意什么？</h2><p>基本：</p>
<ul>
<li><p>非空字段：<strong>应该指定列为NOT NULL，除非你想存储NULL</strong>。在mysql中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值；</p>
</li>
<li><p>字段取值差异大的列放到联合索引的前面：可以通过 count() 函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。</p>
</li>
<li><p>索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次IO操作获取的数据越大效率越高。</p>
</li>
<li><p>避免索引失效的发生。</p>
</li>
</ul>
<p>对于联合索引，将查询需求频繁或者字段取值差异大的列放在前面。</p>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>索引失效，即查询语句用到了索引列，但是无法用到已经建立的索引。</p>
<ul>
<li><p>计算导致索引失效。包括使用函数、运算符。以使用运算符为例</p>
<p>  例如对 score 列建立了索引，想要查询 score*2 &lt; 100 的记录，不能写：</p>
<p>  SELECT * FROM student WHERE score*2 &lt;  100; 会导致遍历整个表计算并且判断</p>
<p>  而应该写</p>
<p>  SELECT * FROM student WHERE score &lt;  50; 这种写法才能用到索引</p>
</li>
<li><p>类型不一致导致索引失效。</p>
<p>  SELECT * FROM student  WHERE name &#x3D; ABC，ABC 不是字符串</p>
</li>
<li><p>OR引起的索引失效 </p>
<p>  如果 OR 连接的是同一个字段，那么索引不会失效，反之索引失效。</p>
<p>  SELECT * FROM <code>user</code> WHERE <code>name</code> &#x3D; ‘张三’ OR height &#x3D; ‘175’;</p>
</li>
</ul>
<h1 id="MySQL-基础"><a href="#MySQL-基础" class="headerlink" title="MySQL 基础"></a>MySQL 基础</h1><h2 id="数据库的三范式"><a href="#数据库的三范式" class="headerlink" title="数据库的三范式"></a>数据库的三范式</h2><p>第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。</p>
<p>第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。</p>
<p>第三范式：任何非主属性不依赖于其它非主属性。</p>
<h2 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h2><p>与 MyISAM 相比，InnoDB</p>
<ul>
<li>支持行级锁（默认），加锁粒度小，并发度高。但加锁的开销也最大，加锁慢</li>
<li>支持事务</li>
<li>支持崩溃恢复，恢复的过程依赖于 redo log 。</li>
<li>采用聚簇索引，叶子结点存储行记录，可直接获得数据（非聚簇索引要跳转）。</li>
</ul>
<p>InnoDB 支持外键，而 MyISAM 不支持</p>
<p>Innodb 不支持全文索引，而 MyISAM 支持全文索引，查询效率上 MyISAM 要高；<br>InnoDB 不保存表的具体行数，MyISAM 用一个变量保存了整个表的行数。</p>
<h2 id="超键、候选键、主键、外键"><a href="#超键、候选键、主键、外键" class="headerlink" title="超键、候选键、主键、外键"></a>超键、候选键、主键、外键</h2><p>超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</p>
<p>候选键：是最小超键，即没有冗余元素的超键。</p>
<p>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值。</p>
<p>外键：在一个表中存在的另一个表的主键称此表的外键。</p>
<h2 id="SQL-约束"><a href="#SQL-约束" class="headerlink" title="SQL 约束"></a>SQL 约束</h2><p>NOT NULL: 字段内容不能为空（NULL）。</p>
<p>UNIQUE: 字段内容不能重复，一个表允许有多个 Unique 约束。</p>
<p>PRIMARY KEY: 字段内容不能重复，但它在一个表只允许出现一个。</p>
<p>FOREIGN KEY: 用于预防破坏表之间连接的动作，也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</p>
<p>CHECK: 用于控制字段的值范围。</p>
<p>MySQL中 in 和 exists 区别<br>MySQL中的in语句是把外表和内表作hash 连接，而exists语句是对外表作loop循环，每次loop循环再对<br>内表进行查询。一直大家都认为exists比in语句的效率要高，这种说法其实是不准确的。这个是要区分环<br>境的。<br>如果查询的两个表大小相当，那么用in和exists差别不大。<br>如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in。<br>not in 和not exists：如果查询语句使用了not in，那么内外表都进行全表扫描，没有用到索引；而not<br>extsts的子查询依然能用到表上的索引。所以无论那个表大，用not exists都比not in要快。</p>
<p>drop、delete与truncate的区别<br>三者都表示删除，但是三者有一些差别：</p>
<p><img src="/2022/04/06/MySQL/image-20220407103015269.png"></p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>何为事务？一言蔽之，事务是逻辑上的一组操作，要么都执行，要么都不执行。<br>假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作就是：</p>
<ol>
<li>将小明的余额减少 1000 元</li>
<li>将小红的余额增加 1000 元。</li>
</ol>
<p>事务会把这两个操作就可以看成逻辑上的一个整体，这个整体包含的操作要么都成功，要么都要失败。这样就不会出现小明余额减少而小红的余额却并没有增加的情况。</p>
<h2 id="ACID-特性"><a href="#ACID-特性" class="headerlink" title="ACID 特性"></a>ACID 特性</h2><p>关系型数据库事务都有 ACID 特性：</p>
<ol>
<li>原子性（Atomicity） ： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么全部不完成；</li>
<li>一致性（Consistency）： 事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li>
<li>隔离性（Isolation）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li>
<li>持久性（Durability）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>
</ol>
<h2 id="事务的实现原理-x2F-如何保证-ACID"><a href="#事务的实现原理-x2F-如何保证-ACID" class="headerlink" title="事务的实现原理&#x2F;如何保证 ACID"></a>事务的实现原理&#x2F;如何保证 ACID</h2><p>以 MySQL 的 InnoDB 引擎为例。</p>
<ul>
<li><p>MySQL InnoDB 引擎使用 redo log（重做日志） 保证事务的持久性，使用 undo log（回滚日志） 来保证事务的原子性。redo log 记录的是修改了缓存池数据页的所有命令，undo log 记录的是某个事务中所更新记录的历史版本</p>
</li>
<li><p>MySQL InnoDB 引擎通过锁机制、MVCC（多版本并发控制） 等手段来保证事务的隔离性（ 默认支持的隔离级别是 REPEATABLE-READ ）。</p>
</li>
<li><p>保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。</p>
</li>
</ul>
<h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><p>redo log 能保证事务的持久性。</p>
<p>MySQL 中数据是以页为单位，查询一条记录，会从硬盘把一页的数据加载出来，加载出来的数据叫数据页，会放入到 Buffer Pool 中。</p>
<p>后续的查询都是先从 Buffer Pool 中找，没有命中再去硬盘加载，减少硬盘 IO 开销，提升性能。</p>
<p>更新表数据的时候，也是如此，发现 Buffer Pool 里存在要更新的数据，就直接在 Buffer Pool 里更新。然后会把“在某个数据页上做了什么修改”记录到重做日志缓存（redo log buffer）里，接着刷盘到 redo log 文件里。</p>
<p><img src="/2022/04/06/MySQL/1646831502098-89c9da04-564f-4e6e-85aa-6664203a0b20.png" alt="redo log 生成过程"></p>
<p>redo log 记录了数据的修改，因此可以根据日志内容恢复数据。通过刷盘，将缓存中的 redo log buffer 更新到硬盘中的 redo log 文件，这样即使数据库出现故障，redo log 也不会丢失，从而实现了持久化。</p>
<p>数据在硬盘的 paga cache 中，这个过程称之为<strong>write</strong>，数据真正持久化到磁盘这个过程称之为<strong>fsync</strong>。</p>
<blockquote>
<p>在MySQL中，为了提高数据库的性能，MySQL采用了WAL（Write-Ahead Logging）机制，即在实际写数据前，先把修改的数据记到日志文件中。MySQL的写数据是写硬盘数据，与 redis 不同，redis的写数据指的是写内存。</p>
<p>这样做的原因在于，磁盘读写速度慢。磁盘定位数据的过程可能会是磁盘的随机读，随机读的过程是非常慢的。</p>
<p>WAL机制，主要的操作是先写日志，先在一个日志中记录了MySQL要对硬盘中的存储MySQL数据的数据页中的数据进行什么样的更改，等到Mysql空闲的时候再进行同步操作到硬盘中。</p>
<p>同样是操作磁盘，为什么写日志比直接改数据会更加高效？</p>
<p>答案在于写日志是顺序写，直接改磁盘是随机写。所以同样是写，它们写的速度有着天壤之别。这也是WAL的另外一个好处。</p>
</blockquote>
<h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>undo log 能保证事务的原子性，和实现 MVCC（多版本并发控制）</p>
<p>对于 InnoDB ，聚簇索引记录中包含 3 个隐藏的列：</p>
<ul>
<li>ROW ID：隐藏的自增 ID，如果表没有主键，InnoDB 会自动按 ROW ID 产生一个聚集索引树。</li>
<li>事务 ID：记录最后一次修改该记录的事务 ID。</li>
<li>回滚指针：指向这条记录的上一个版本。</li>
</ul>
<p>假设执行如下两个事务。如图，首先 insert 语句向空表 t1 中插入了一条数据，a &#x3D; 1，b &#x3D; 1， 隐式生成的 ROW ID &#x3D; 1 ，事务 ID &#x3D; 1，回滚指针&#x3D; null。当执行 update t1 set b&#x3D;666 where a&#x3D;1 时，大致步骤如下：</p>
<ul>
<li>数据库会先对满足 a&#x3D;1 的行加排他锁（对该行的隐藏字段并不加排他锁）；</li>
<li>然后将原记录复制到 undo log空间中；</li>
<li>修改 b 字段的值为 666；</li>
<li>修改事务 ID 为 2，并通过隐藏的回滚指针指向 undo log 中的历史记录；</li>
<li>事务提交，释放前面对满足 a&#x3D;1 的行所加的排他锁。</li>
</ul>
<p><img src="/2022/04/06/MySQL/1647872433220-f2c141c9-1a75-43a5-9db1-55abe39f6b97-164929795888010.png"></p>
<p>总的来说，每一行数据都有一个隐藏的回滚指针，用于指向该行的上一个版本，这个版本的记录存放在 undo log 中。如果要执行更新操作，会将原记录放入 undo log 中，并通过隐藏的回滚指针指向 undo log 中的原记录。</p>
<p>实现回滚：对同一行记录的不断更新，undo log 中的历史记录实际上会形成一个链表。因此，遍历链表逐步回滚即可。</p>
<p>实现 MVCC：其它事务此时（即事务未提交时）若需要查询，根据回滚指针查询 undo log 中这行数据的上一个历史版本。（由于记录的隐藏字段没有加排他锁，所以可以访问回滚指针）。MVCC 最大的好处是读不加锁，读写不冲突，极大地增加了 MySQL 的并发性。</p>
<h3 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h3><p>MySQL的 binlog 是记录所有数据库表结构变更（例如 CREATE、ALTER TABLE）以及表数据修改（INSERT、UPDATE、DELETE）的二进制日志。</p>
<p>binlog 有三种格式：</p>
<p>statement： 基于 SQL 语句的模式，某些语句和函数如 UUID, LOAD DATA INFILE 等在复制过程可能导致数据不一致甚至出错。</p>
<p>row： 基于行的模式，记录的是行的变化，很安全。但是 binlog 会比其他两种模式大很多，在一些大表中清除大量数据时在 binlog 中会生成很多条语句，可能导致从库延迟变大。</p>
<p>mixed： 混合模式，根据语句来选用是 statement 还是 row 模式。</p>
<h4 id="bin-log-与-redo-log-的区别"><a href="#bin-log-与-redo-log-的区别" class="headerlink" title="bin log 与 redo log 的区别"></a>bin log 与 redo log 的区别</h4><ol>
<li>binlog是MySQL数据库的上层产生的，任何存储引擎对于数据库的更改都会产生二进制日志。redo log是在InnoDB存储引擎层产生</li>
<li>两种日志记录的内容形式不同。MySQL的binlog是逻辑日志，其记录是对应的SQL语句。而innodb存储引擎层面的重做日志是物理日志。</li>
<li>两种日志与记录写入磁盘的时间点不同，二进制日志只在事务提交完成后进行一次写入。而innodb存储引擎的重做日志在事务进行中不断地被写入，并日志不是随事务提交的顺序进行写入的。</li>
</ol>
<p>二进制日志仅在事务提交时记录，并且对于每一个事务，仅在事务提交时记录，并且对于每一个事务，仅包含对应事务的一个日志。而对于innodb存储引擎的重做日志，由于其记录是物理操作日志，因此每个事务对应多个日志条目，并且事务的重做日志写入是并发的，并非在事务提交时写入，其在文件中记录的顺序并非是事务开始的顺序。</p>
<p>第四：binlog不是循环使用，在写满或者重启之后，会生成新的binlog文件，redo log是循环使用。</p>
<h2 id="并发事务带来哪些问题？"><a href="#并发事务带来哪些问题？" class="headerlink" title="并发事务带来哪些问题？"></a>并发事务带来哪些问题？</h2><p>脏读（Dirty Read）。一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据</p>
<p>不可重复读（Unrepeatable read）：在一个事务内，多次读同一数据，读取的数据不一致。</p>
<p>幻读（Phantom read）: 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>
<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>READ-UNCOMMITTED(读取未提交)： 最低的隔离级别，允许读取尚未提交的数据变更</p>
<p>READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据</p>
<p>REPEATABLE-READ(可重复读)： 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改</p>
<p>SERIALIZABLE(可串行化)： 所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>READ-UNCOMMITTED</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>READ-COMMITTED</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>REPEATABLE-READ</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p><strong>隔离级别与锁的关系</strong></p>
<p>修改数据都会加写锁&#x2F;排他锁</p>
<p>在Read Uncommitted级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突</p>
<p>在Read Committed级别下，读操作需要加共享锁，但是在语句执行完以后释放共享锁；</p>
<p>在Repeatable Read级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执行完毕以后才释放共享锁。</p>
<p>SERIALIZABLE 是限制性最强的隔离级别，因为该级别锁定整个范围的键，并一直持有锁，直到事务完成。</p>
<h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><h2 id="为什么要分库分表？"><a href="#为什么要分库分表？" class="headerlink" title="为什么要分库分表？"></a>为什么要分库分表？</h2><p>分表</p>
<p>单表数据量太大，会极大影响 sql执行的性能。</p>
<p>分表就是把一个表的数据放到多个表中，然后查询的时候你就查一个表。比如按照用户 id 来分表，将一个用户的数据就放在一个表中。然后操作的时候你对一个用户就操作那个表就好了。这样可以控制每个表的数据量在可控的范围内，比如每个表就固定在 200 万以内。</p>
<p>分库</p>
<p>分库就是你一个库一般我们经验而言，最多支撑到并发 2000，一定要扩容了，而且一个健康的单库并发值你最好保持在每秒 1000 左右，不要太大。那么你可以将一个库的数据拆分到多个库中，访问的时候就访问一个库好了。</p>
<h2 id="垂直拆分和水平拆分"><a href="#垂直拆分和水平拆分" class="headerlink" title="垂直拆分和水平拆分"></a>垂直拆分和水平拆分</h2><p>水平拆分</p>
<ul>
<li>对于表来说，就是按行拆分。对于库来说，就是对库里的每个表这么做。</li>
<li>水平拆分的意义，就是将数据均匀放更多的库里，然后用多个库来抗更高的并发，还有就是用多个库的存储容量来进行扩容。</li>
</ul>
<p>垂直拆分</p>
<ul>
<li>就是按列&#x2F;字段拆分，每个表都包含部分字段。一般来说，会将较少的访问频率很高的字段放到一个表里去，然后将较多的访问频率很低的字段放到另外一个表里去。</li>
<li>因为数据库是有缓存的，访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Java basis</title>
    <url>/2022/04/04/Java-basis/</url>
    <content><![CDATA[<span id="more"></span>
<p>基本类型    大小    取值范围    装箱基本类型<br>int    4个字节    -2^31 ~ 2^31-1    Integer<br>char    2个字节         Character<br>byte    1个字节    -2^7 ~ 2^7-1    Byte<br>short    2个字节    -2^15 ~ 2^15-1    Short<br>long    8个字节    -2^63 ~ 2^63-1    Long<br>float    4个字节         Float<br>double    8个字节         Double<br>boolean    1或者4个字节    true ~ false    Boolean</p>
<p>引用&#x2F;地址：根据系统位数决定</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java 并发</title>
    <url>/2022/04/07/Java-Concurrency/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>创建线程实例一般有两种方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//继承 Thread 类并重写 run()</span><br><span class="line">public class MyThread extends Thread &#123;</span><br><span class="line">@Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;MyThread running&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">MyThread myThread = newMyThread();</span><br><span class="line">myThread.start();</span><br><span class="line"></span><br><span class="line">// 实现 Runnable 接口并重写 run()</span><br><span class="line">public class MyRunnable implements Runnable&#123;</span><br><span class="line">@Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;MyRunnable running&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 在 Thread  类的构造函数中传入 MyRunnable  的实例对象</span><br><span class="line">Thread thread = newThread(new MyRunnable());</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>

<h2 id="创建线程的三种方式的对比"><a href="#创建线程的三种方式的对比" class="headerlink" title="创建线程的三种方式的对比"></a>创建线程的三种方式的对比</h2><p>继承 Thread 类</p>
<p>优点：如果要访问当前线程，无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</p>
<p>缺点：线程类已经继承了Thread类，所以不能再继承其他父类。</p>
<p>实现 Runnable 或 Callable 接口。</p>
<p>优点：线程类可以继承其他类。</p>
<p>缺点：如果要访问当前线程，则必须使用 Thread.currentThread() 方法。</p>
<h2 id="Runnable-和-Callable-的区别"><a href="#Runnable-和-Callable-的区别" class="headerlink" title="Runnable 和 Callable 的区别"></a>Runnable 和 Callable 的区别</h2><p>Callable 重写的方法是 call()，Runnable 重写的方法是 run()</p>
<ul>
<li><p>Call 方法可以抛出异常，run 方法不可以。</p>
</li>
<li><p>Call 方法可异步返回一个Future对象，run 方法没有返回值。</p>
<p>  Future 对象，表示异步计算的结果。通过这个对象可以判断任务是否执行成功，并且可以通过 get() 方法来获取返回值，get() 方法会阻塞当前线程直到任务完成，get() 也可以设置阻塞时间，在一定时间后立即返回，这时候有可能任务没有执行完。</p>
</li>
</ul>
<h1 id="线程的生命周期和状态"><a href="#线程的生命周期和状态" class="headerlink" title="线程的生命周期和状态"></a>线程的生命周期和状态</h1><p>New、Runnable、Running、（Blocked、Waiting、Timed_Waiting）、Dead</p>
<ul>
<li><p>调用 start 方法方可启动线程并使线程进入就绪状态</p>
</li>
<li><p>Blocked、Waiting、Timed_Waiting：在满足条件后进入 Runnable，等待调度</p>
</li>
<li><p>Synchronized 方法执行完后回到就绪状态</p>
</li>
<li><p>线程死亡分为正常结束（run()  或者 call()  方法执行完成）和异常结束（线程抛出一个未捕获的 Exception  或 Error）</p>
</li>
</ul>
<p><img src="/2022/04/07/Java-Concurrency/1647567554292-06cfc90a-5237-4910-9b51-823c1d7f20aa.png" alt="线程状态转移图"></p>
<blockquote>
<p>订正：原图中 wait 到 runnable 状态的转换中，join实际上是Thread类的方法，但这里写成了Object。</p>
</blockquote>
<p>Thread.yield 方法有什么作用？</p>
<p>可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。只保证当前线程放弃 CPU 占用而不能保证使其它线程一定能占用 CPU，执行 yield() 的线程有可能在进入到暂停状态后马上又被执行。</p>
<h2 id="sleep-方法和-wait-方法比较"><a href="#sleep-方法和-wait-方法比较" class="headerlink" title="sleep() 方法和 wait() 方法比较"></a>sleep() 方法和 wait() 方法比较</h2><p>相同点：都可以暂停线程的执行</p>
<p>区别：</p>
<ul>
<li>sleep() 方法没有释放锁，而 wait() 方法释放了锁</li>
<li>sleep() 通常被用于暂停执行，wait() 通常被用于线程间交互&#x2F;通信</li>
<li>wait() 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 notify() 或者 notifyAll() 方法。sleep() 方法执行完成后，线程会自动苏醒。或者可以使用 wait(long timeout) 超时后线程会自动苏醒。</li>
</ul>
<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><h2 id="使用-synchronized-关键字"><a href="#使用-synchronized-关键字" class="headerlink" title="使用 synchronized 关键字"></a>使用 synchronized 关键字</h2><p><strong>修饰实例方法</strong>：作用于当前对象实例加锁。synchronized void method()</p>
<p><strong>修饰静态方法</strong>：也就是给当前类加锁。synchronized static void method()</p>
<p><strong>修饰代码块</strong>：synchronized(…){}</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>在 Java 早期版本中，synchronized 属于 <strong>重量级锁</strong>，效率低下。</p>
<h3 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h3><p>monitor 对象存在于每个 Java 对象的对象头中，具体来说，对象头中存储着指向该对象的 monitor 的指针。</p>
<p>monitor 对象内部包含一个计数器。</p>
<p>当一个线程尝试获取 monitor 的所有权，即执行 monitorenter 指令</p>
<ul>
<li>如果计数器为 0 则可以成功获取，获取后将计数器加1。</li>
<li>如果该线程已经占有该 monitor，计数器加1；（synchronized 的可重入性）</li>
<li>如果 monitor 被其他线程所占有，那么该线程会被阻塞，直到该 monitor 的计数器变为 0，此时该线程会再次尝试获取该 monitor。</li>
</ul>
<p>对于已经获取 monitor 的线程，执行 monitorexit 指令后，不断将锁计数器减 1 直到为 0，表明锁被释放。</p>
<blockquote>
<p>monitor 的性能</p>
<p>监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，这导致从用户模式转换到内核模式。</p>
<p>CPU 模式转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”</p>
</blockquote>
<h3 id="字节码层面"><a href="#字节码层面" class="headerlink" title="字节码层面"></a>字节码层面</h3><p>修饰代码块：通过 monitorenter 和 monitorexit 指令，指明同步代码块的开始和结束位置。当线程执行该方法时，线程需要先获取monitor，获取成功后才能调用方法，方法执行完后再释放monitor。</p>
<p>修饰方法：用 ACC_SYNCHRONIZED 标识指明该方法是一个同步方法。当线程执行该方法时，线程需要先获取monitor，获取成功后才能调用方法，方法执行完后再释放monitor。用一种隐式的方式来实现，而不是显式地通过字节码指令 monitorenter 和 monitorexit。</p>
<h2 id="Synchronized-的作用"><a href="#Synchronized-的作用" class="headerlink" title="Synchronized 的作用"></a>Synchronized 的作用</h2><ol>
<li>原子性：确保线程互斥的访问同步代码；</li>
<li>可见性：保证共享变量的修改能够及时可见，Synchronized 块内部的共享变量或者 Synchronized 方法内部用到的共享变量都会保证可见性；</li>
<li>有序性：有效解决重排序问题，即 “一个unlock操作先行发生(happen-before)于后面对同一个锁的lock操作”</li>
</ol>
<h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>Java 6 之后官方从 JVM 层面（体现在对象头）对 synchronized 进行优化。如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。</p>
<p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。（锁膨胀）</p>
<p>无锁：实现方式是 CAS</p>
<p>偏向锁</p>
<p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p>
<p><strong>轻量级锁</strong></p>
<p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。（两个线程？）</p>
<p>重量级锁<br>重量级锁是由轻量级锁升级而来，当同一时间有<strong>多个线程</strong>竞争锁时，锁就会被升级成重量级锁，此时其<br>申请锁带来的开销也就变大。</p>
<h4 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h4><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p>
<p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p>
<p>通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：</p>
<p><img src="/2022/04/07/Java-Concurrency/1647570341727-faad309d-e71b-4729-88ff-de337d9a0cc2.jpeg"></p>
<p>无锁：实现方式是 CAS</p>
<p>偏向锁</p>
<p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p>
<p><strong>轻量级锁</strong></p>
<p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p>
<h2 id="synchronized-和-ReentrantLock-的对比"><a href="#synchronized-和-ReentrantLock-的对比" class="headerlink" title="synchronized 和 ReentrantLock 的对比"></a>synchronized 和 ReentrantLock 的对比</h2><p>相同：两者都是可重入锁</p>
<p>区别：</p>
<ul>
<li><p>synchronized 可以给类、方法、代码块加锁；而 lock 只能给代码块加锁。</p>
</li>
<li><p>synchronized 是依赖于 JVM 实现的，ReentrantLock 是 API 层面，需要 lock() 和 unlock() 方法配合 try&#x2F;finally 语句块来完成</p>
<blockquote>
<p>ReetrantLock 实现依赖于 AQS(AbstractQueuedSynchronizer)。ReetrantLock 主要依靠 AQS 维护一个阻塞队列，多个线程对加锁时，失败则会进入阻塞队列。等待唤醒，重新尝试加锁。</p>
</blockquote>
</li>
<li><p>synchronized 不需要手动获取锁和释放锁，发生异常会自动释放锁，不会造成死锁；而 lock 需要自己加锁和释放锁，如果没有正确释放锁会造成死锁。</p>
</li>
<li><p>ReentrantLock 比 synchronized 增加了一些高级功能。</p>
<ul>
<li>等待可中断：可以设置线程等待锁的时间，超时可以放弃等待处理其他事情</li>
<li>synchronized 是非公平锁，ReentrantLock 可以指定是公平锁还是非公平锁。所谓的公平锁就是先等待的线程先获得锁。默认情况是非公平的，可以通过类的构造方法来设置。</li>
<li><strong>可实现选择性通知</strong>: 一个锁可以绑定多个 Condition 对象，对特定的 Condition 对象调用 .signal()，可以指定唤醒等待在该  Condition 对象上的线程。而 synchronized，只能对锁对象，如 this，调用 this.notifyAll()，唤醒绑定该锁的所有线程，无法选择具体唤醒的线程。</li>
</ul>
<p>  ReentrantLock 在获得锁的时候用到了 CAS（公平或者非公平方式），但是这只是为了获得锁的时候同步，并不是为了对用到ReentrantLock的代码块同步。ReentrantLock 用 CAS 方式获得锁之后，其他线程不能获取锁，所以是悲观锁。</p>
</li>
</ul>
<h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><p>volatile 保证可见性和有序性。</p>
<p>可见性：每次更新到主存，从主存读取</p>
<p>有序性</p>
<p>涉及到 volatile 的代码才能防止重排列（代码等价于多条指令，从指令的角度防止）</p>
<p>这段代码其实是分为三步执行：</p>
<ol>
<li>为 uniqueInstance 分配内存空间</li>
<li>初始化 uniqueInstance</li>
<li>将 uniqueInstance 指向分配的内存地址</li>
</ol>
<p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p>
<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><p>CAS 全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent 包中的原子类就是通过 CAS 来实现了乐观锁。</p>
<p>它是一条 CPU 同步原语。是一种硬件对并发的支持（<strong>通过硬件来实现执行的原子性</strong>）</p>
<p>CAS 算法涉及到三个操作数：</p>
<ul>
<li>需要读写的内存值 V。</li>
<li>进行比较的值 A。</li>
<li>要写入的新值 B。</li>
</ul>
<p>当且仅当 V 的值等于 A 时，用新值 B 来更新 V 的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作（自旋）。</p>
<h2 id="CAS-存在的问题"><a href="#CAS-存在的问题" class="headerlink" title="CAS 存在的问题"></a>CAS 存在的问题</h2><p>CAS虽然很高效，但是它也存在三大问题：</p>
<ul>
<li><p>ABA 问题。CAS 需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是 A，后来变成了 B，然后又变成了 A，那么CAS 进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA 问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</p>
<blockquote>
<p>JDK 从 1.5 开始提供了 AtomicStampedReference 类来解决 ABA 问题，具体操作封装在compareAndSet() 中。compareAndSet() 首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</p>
</blockquote>
</li>
<li><p><strong>循环时间长开销大</strong>。CAS 操作如果长时间不成功，会导致其一直自旋，给 CPU 带来非常大的开销。 可以采用适应性自旋，控制自旋时间。</p>
</li>
<li><p>只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p>
<blockquote>
<p> Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</p>
</blockquote>
</li>
</ul>
<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>ThreadLocal，即线程本地变量。如果你创建了一个 ThreadLocal 变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝，多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程安全问题（不再是共享变量）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建一个ThreadLocal变量</span><br><span class="line">// 注意用 static 修饰，但是使用的时候却不是共享变量</span><br><span class="line">static ThreadLocal&lt;T&gt;localVariable=new ThreadLocal&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h2 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h2><p>每个线程都有一个 Thread.ThreadLocalMap 类的成员变量，该变量内部维护了 Entry 数组，key 是 ThreadLocal对象的引用，value是 ThreadLocal 对象的值。</p>
<p>每个线程在访问 ThreadLocal 的时候，都是访问自己的 ThreadLocalMap 里的键值对。也就是，根据 ThreadLocal 对象的引用，以此作为 key，查找自己的 Entry 数组那个键值对。</p>
<p><img src="/2022/04/07/Java-Concurrency/1647934439309-8240096e-733c-4245-a388-d25be535f9e2.png" alt="ThreadLocal 原理"></p>
<h2 id="内存泄露问题"><a href="#内存泄露问题" class="headerlink" title="内存泄露问题"></a>内存泄露问题</h2><p>ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用</p>
<blockquote>
<p>弱引用：只要垃圾回收机制一运行，不管 JVM 的内存空间是否充足，都会回收该对象占用的内存。</p>
</blockquote>
<p>弱引用比较容易被回收。因此，如果ThreadLocal（ThreadLocalMap的Key）被垃圾回收器回收了，但是因为ThreadLocalMap生命周期和Thread是一样的，它这时候如果不被回收，就会出现这种情况：</p>
<p>ThreadLocalMap的key没了，value还在，这就会「造成了内存泄漏问题」。</p>
<p>如何「解决内存泄漏问题」？使用完ThreadLocal后，及时调用remove()方法释放内存空间</p>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p><strong>使用线程池的好处</strong></p>
<ul>
<li><p>降低资源消耗。 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>
</li>
<li><p>提高响应速度。 当任务到达时，任务可以不需要的等到线程创建就能立即执行。</p>
</li>
<li><p>提高线程的可管理性。 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p>
</li>
</ul>
<h2 id="线程池的核心参数"><a href="#线程池的核心参数" class="headerlink" title="线程池的核心参数"></a>线程池的核心参数</h2><p><strong>corePoolSize</strong>：最小可以同时运行的线程数量。</p>
<p><strong>workQueue</strong>：当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。工作队列即阻塞队列。</p>
<p><strong>maximumPoolSize</strong>：当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</p>
<p><strong>defaultHandler</strong>：饱和策略。如果阻塞队列已满，且当前线程数&gt;&#x3D;maximumPoolSize，执行饱和策略</p>
<ul>
<li>AbortPolicy ： 线程任务丢弃并报错。默认饱和策略。</li>
<li>DiscardPolicy ： 线程任务直接丢弃不报错。</li>
<li>DiscardOldestPolicy ： 将 workQueue 队首任务丢弃，将最新线程任务重新加入队列执行。</li>
<li>CallerRunsPolicy ：线程池之外的线程直接调用 run 方法执行。</li>
</ul>
<h2 id="线程池大小如何设置"><a href="#线程池大小如何设置" class="headerlink" title="线程池大小如何设置"></a>线程池大小如何设置</h2><p>CPU密集型任务（N+1）：这种任务消耗的主要是CPU资源，可以将线程数设置为 N（CPU核心数）+1，多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用CPU的空闲时间。</p>
<p>I&#x2F;O密集型任务（2N）：线程进行 I&#x2F;O 时需要等待 IO 结果，等待的时间内无法做其他事情，这时就可以将 CPU 交出给其它线程使用。</p>
<h2 id="线程池的创建方式"><a href="#线程池的创建方式" class="headerlink" title="线程池的创建方式"></a>线程池的创建方式</h2><ul>
<li>newCachedThreadPool：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li>
<li>newFixedThreadPool：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li>
<li>newScheduledThreadPool：创建一个定长线程池，支持定时及周期性任务执行。</li>
<li>newSingleThreadExecutor：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序（FIFO,LIFO,优先级）执行。</li>
</ul>
<h2 id="execute-和-sub-mit-比较"><a href="#execute-和-sub-mit-比较" class="headerlink" title="execute() 和 sub mit() 比较"></a>execute() 和 sub mit() 比较</h2><p>execute() 用于提交不需要返回值的任务，所以无法判断任务是否被线程池成功执行；</p>
<p>submit() 用于提交需要返回值的任务。线程池会返回一个Future 对象，表示异步计算的结果。通过这个对象可以判断任务是否执行成功，并且可以通过 get() 方法来获取返回值，get() 方法会阻塞当前线程直到任务完成，get() 也可以设置阻塞时间，在一定时间后立即返回，这时候有可能任务没有执行完。</p>
<h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p>AQS 底层是由同步队列 + 条件队列联手组成，同步队列管理着获取不到锁的线程的排队和释放，<br>条件队列是在一定场景下，对同步队列的补充，比如获得锁的线程从空队列中拿数据，肯定是拿不<br>到数据的，这时候条件队列就会管理该线程，使该线程阻塞</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java 集合</title>
    <url>/2022/04/02/Java-Data-Structure/</url>
    <content><![CDATA[<p>Java 集合类主要由两个根接口 Collection 和 Map 派生出来，Collection派生出了三个子接口：List、Set、Queue，因此 Java 集合大致也可分成 List、Set、Queue、Map 四种接口体系。</p>
<span id="more"></span>

<blockquote>
<p>Collection 是一个接口，Collections 是一个工具类。</p>
</blockquote>
<p><img src="/2022/04/02/Java-Data-Structure/image-20220402130636222.png" alt="image-20220402130636222"></p>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p>ArrayList 与 LinkedList 比较</p>
<ul>
<li>是否保证线程安全：都不保证线程安全；</li>
<li>底层数据结构： Arraylist 底层使用的是 Object 数组；LinkedList 底层使用的是双向循环链表；</li>
<li>插入和删除： O(N) 和 O(1)</li>
<li>是否支持快速随机访问： 快速随机访问就是通过元素的索引访问</li>
<li>内存空间占用： ArrayList 的空间浪费主要体现在结尾会预留一定的空间，而 LinkedList 的空间花费则体现在每一个元素除了值还要存放 prev、next</li>
</ul>
<p>ArrayList 与 Vector 比较</p>
<ul>
<li>Vector 是线程安全的，方法前面加了 synchronized 关键字</li>
<li>ArrayList 的扩容倍数为 1.5，Vector 是扩展 2 倍（多线程环境，扩得更大点）</li>
</ul>
<p>ArrayList 和 Array（数组）比较</p>
<ul>
<li>Array 可以包含基本类型和对象类型，ArrayList 只能包含对象类型（Integer 而非 int）。</li>
<li>Array 大小是固定的，ArrayList 的大小是动态变化的。</li>
<li>ArrayList 提供了更多的方法和特性，比如：addAll()，removeAll()，iterator() 等等</li>
</ul>
<p>ArrayList 的扩容机制</p>
<p>计算出新的扩容数组的大小后创建新数组，并将原有数组内容复制到新数组中去。默认情况下，新的容量会是原容量的1.5倍。</p>
<blockquote>
<p>1.5 倍：int newCapacity &#x3D; oldCapacity+ (oldCapacity&gt;&gt;1);</p>
</blockquote>
<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="解决-hash-冲突的方法"><a href="#解决-hash-冲突的方法" class="headerlink" title="解决 hash 冲突的方法"></a>解决 hash 冲突的方法</h2><p>开放定址法、再哈希法、拉链法、建立公共溢出区</p>
<p>开放定址法也称为再散列法，基本思想就是，如果 p&#x3D;H(key) 出现冲突时，则以 p 为基础，再次 hash，即 p1&#x3D;H(p) ，如果 p1 再次出现冲突，则继续以 p1 为基础，以此类推，直到找到一个不冲突的哈希地址 pi。</p>
<ul>
<li>优点：如果记录总数可以预知，可以创建完美哈希函数，此时处理数据的效率是非常高的</li>
<li>缺点： <ul>
<li>多次哈希，计算哈希值的时间成本较高</li>
<li>存储记录的数目不能超过桶数组的长度。这是因为未填满数组时，总会找到一个空的地方存放，但当填满数组，会触发扩容，而扩容会导致每个元素再次计算哈希值（多次哈希），十分耗时</li>
<li>删除记录时，比较麻烦。比如需要删除记录a，记录b是在a之后插入桶数组的，但是和记录a有冲突，是通过探测序列再次跳转找到的地址，所以如果直接删除a，a的位置变为空槽，而空槽是查询记录失败的终止条件，这样会导致记录b在a的位置重新插入数据前不可见，所以不能直接删除a，而是设置删除标记。这就需要额外的空间和操作。</li>
</ul>
</li>
</ul>
<p>再哈希法（双重散列，多重散列），提供多个不同的 hash 函数，当 R1&#x3D;H1(key1) 发生冲突时，再计<br>算 R2&#x3D;H2(key1) ，直到没有冲突为止。 多次哈希，计算哈希值的时间成本较高</p>
<p>拉链法，将哈希值相同的元素构成一个单链表</p>
<p>建立公共溢出区，将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</p>
<h2 id="HashMap-的底层数据结构"><a href="#HashMap-的底层数据结构" class="headerlink" title="HashMap 的底层数据结构"></a>HashMap 的底层数据结构</h2><p>在 JDK1.7 中，由“数组+链表”组成；在 JDK1.8 中，由“数组+链表+红黑树”组成</p>
<h3 id="JDK1-8-HashEntry-数据结构"><a href="#JDK1-8-HashEntry-数据结构" class="headerlink" title="JDK1.8 HashEntry 数据结构"></a>JDK1.8 HashEntry 数据结构</h3><h4 id="链表转化为红黑树的时机"><a href="#链表转化为红黑树的时机" class="headerlink" title="链表转化为红黑树的时机"></a>链表转化为红黑树的时机</h4><p>是扩容，还是将链表转化为红黑树，实际考察点有两个：</p>
<ul>
<li>扩容操作和转化为红黑树操作的效率</li>
<li>扩容后重新哈希，可以缩小链表长度，增加搜索效率；转化为红黑树，增加搜索效率</li>
</ul>
<p>当链表长度超过 8，</p>
<ul>
<li>如果当前数组的长度小于 64，进行数组扩容，尝试通过扩容来<strong>缩小链表长度</strong>，而不是转换为红黑树，以<strong>减少搜索时间</strong>。</li>
<li>如果数组的长度超过 64，转链表为红黑树。之所以这个时候不使用扩容，是因为元素多，扩容操作效率低。</li>
</ul>
<h4 id="为什么不直接使用红黑树-x2F-为什么以-8-为阈值"><a href="#为什么不直接使用红黑树-x2F-为什么以-8-为阈值" class="headerlink" title="为什么不直接使用红黑树&#x2F;为什么以 8 为阈值"></a>为什么不直接使用红黑树&#x2F;为什么以 8 为阈值</h4><p>红黑树的插入操作复杂，需要使用旋转、变色等操作，比链表的插入操作更复杂、效率更低。</p>
<p>比较插入操作的效率和查找操作的效率，进行权衡</p>
<ul>
<li><p>当元素个数小于 8 时，对于查找操作，链表的 O(N) 已经能够满足查询要求，即使用红黑树，提升也不大，然而却会导致插入元素时的效率降低。</p>
</li>
<li><p>当元素个数大于 8 时，虽然红黑树导致插入效率降低的问题，但是与其对查找操作的提升相比，影响不大。</p>
</li>
</ul>
<h4 id="负载因子为什么是-0-75"><a href="#负载因子为什么是-0-75" class="headerlink" title="负载因子为什么是 0.75"></a>负载因子为什么是 0.75</h4><p>0.75 的含义表示当 HashMap 的容量达到总容量的 75% 时 HashMap 会进行扩容</p>
<blockquote>
<p>数组初始化长度 length 默认值是 16，负载因子（Load factor）默认值是 0.75，threshold 是 HashMap 所能容纳键值对的最大个数，threshold &#x3D; length * Load factor</p>
</blockquote>
<p>从哈希冲突和空间利用率两个方面考虑：</p>
<p>负载因子过大，例如将负载因子设置成 1，HashMap 的必须要全部装满才扩容，导致大量的哈希冲突，这时候 put 和 get 操作效率就会低下。（链表，头插的话不影响 put，get 可能导致遍历链表搜素，总会被影响）</p>
<p>负载因子过小，例如将负载因子设置成 0.5，HashMap 的容量达到 50% 就会进行扩容，这样虽然能减少哈希冲突的概率，但是会存在还有一半的空间没有被使用到，造成空间的利用率低下。</p>
<h3 id="HashMap-源码分析"><a href="#HashMap-源码分析" class="headerlink" title="HashMap 源码分析"></a>HashMap 源码分析</h3><h4 id="数组索引值计算"><a href="#数组索引值计算" class="headerlink" title="数组索引值计算"></a>数组索引值计算</h4><p>对于 (key, value)，先得到 key 的 hashCode 值，然后根据 hashcode 计算出 hash 值（HashMap的hash 方法），最后通过 hash&amp;(length-1) 计算存储索引</p>
<p><strong>jdk 1.8 的 hash 方法</strong></p>
<p>hash &#x3D; hashCode ^ (hashCode &gt;&gt;&gt; 16);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    // key.hashCode()：返回散列值也就是hashcode</span><br><span class="line">    // ^ ：按位异或</span><br><span class="line">    // &gt;&gt;&gt;:无符号右移（区别于&gt;&gt;），忽略符号位，空位都以0补齐</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/04/02/Java-Data-Structure/image-20220402133450860.png" alt="image-20220402133450860"></p>
<p><strong>索引计算方法</strong></p>
<p>hash 值的范围是 int 的范围，将 hash 和数组的长度取余运算，得到的余数才是用来要存放的位置也就是对应的数组下标。</p>
<p><strong>证明：hash % n &#x3D; hash &amp; (n-1)，n 为 2 的幂次方</strong></p>
<p>如果除数是 2 的 k 次，根据除法运算求余，余数即 hash 的低 k 位，因此余数等于 hash &amp; 低 k 位全为 1 的二进制数，即余数 &#x3D; hash &amp; (n-1)。</p>
<p><strong>将求余运算转化为与运算，不需要做除法，提高效率</strong></p>
<blockquote>
<p>若除数不是 2 的幂次，却仍然用 &amp; 运算代替 %，则会出现更多的哈希碰撞</p>
<p>容量是2的整数次幂，n -1 后，高位为1后的0都变为1，如 16：10000, 16-1&#x3D;15：1111, 1111 再与 hash 做 &amp; 运算的时候，各个位置的取值取决于 hash；如果不是2的整数次幂，必然会有更多0的位，0与任何数&amp;肯定为0，会造成更多的哈希冲突  </p>
</blockquote>
<h4 id="HashMap-的-put-方法"><a href="#HashMap-的-put-方法" class="headerlink" title="HashMap 的 put 方法"></a>HashMap 的 put 方法</h4><p>以 jdk1.8为例，简要流程如下：</p>
<ol>
<li>首先根据计算 (key, value) 的数组索引；</li>
<li>如果数组是空的，则调用 resize 进行初始化；</li>
<li>如果没有哈希冲突，直接放在对应的数组下标里；</li>
<li>如果冲突了，且 key 已经存在，就覆盖掉 value；（哈希冲突，哈希值相同，索引位置相同，key已经存在，指的是键值 key 已经存在，调用的是 equals 方法）</li>
<li>如果冲突后，发现该节点是红黑树，就将这个节点挂在树上；</li>
<li>如果冲突后是链表，插入键值对，插入后判断是否要将链表转换为红黑树。</li>
</ol>
<h4 id="HashMap-的-resize-方法（扩容）"><a href="#HashMap-的-resize-方法（扩容）" class="headerlink" title="HashMap 的 resize 方法（扩容）"></a>HashMap 的 resize 方法（扩容）</h4><p>HashMap 在容量达到 threshold 之后，就会扩容，调用 void resize(int new Capacity)。方法是创建新数组，新数组大小为原数组的两倍，并将原来的对象放入新的数组中。</p>
<p><strong>jdk 1.7</strong></p>
<ol>
<li>新建一个大小为原来两倍的数组，resize() 入参 newCapacity&#x3D;2*oldCapacity</li>
<li>resize() 内部调用 transfer() 方法将原有 Entry 数组的元素拷贝到新的 Entry 数组里：<ol>
<li>遍历旧数组，对每个数组元素（链表，还会继续遍历）重新计算索引值（哈希值不需要重新计算，扩容只会改变数组大小，进而改变索引值，而哈希值不变）</li>
<li>释放旧数组元素，对于链表，即令数组元素为 null，然后把元素插入到新的数组中，对于链表采用头插法链表：直接插入。</li>
</ol>
</li>
</ol>
<blockquote>
<p>红黑树在转移时、先形成链表，插入链表的时候再判断要不要转成红黑树</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Entry[] newTable)</span> &#123;</span><br><span class="line">        Entry[] src = table;                   <span class="comment">//src引用了旧的Entry数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> newTable.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; src.length; j++) &#123; <span class="comment">//遍历旧的Entry数组</span></span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];             </span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                src[j] = <span class="literal">null</span>;<span class="comment">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再</span></span><br><span class="line">引用任何对象）</span><br><span class="line">				<span class="comment">// 遍历链表，并移动链表元素</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(e.hash, newCapacity); <span class="comment">//重新计算每个元素在数</span></span><br><span class="line">组中的位置</span><br><span class="line">                    e.next = newTable[i]; <span class="comment">// 注意，newTable[i]初值为 null</span></span><br><span class="line">                    newTable[i] = e;      <span class="comment">//将元素放在数组上</span></span><br><span class="line">                    e = next;             <span class="comment">//访问下一个Entry链上的元素</span></span><br><span class="line">                &#125; <span class="keyword">while</span> (e != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>假设一开始的链表为：1 -&gt; 2 -&gt; 3 -&gt; null，则移动之后变为：3 -&gt; 2 -&gt; 1 -&gt; null</strong></p>
<hr>
<p><strong>jdk 1.8</strong></p>
<ol>
<li><p>采用<strong>尾插法</strong>而不是头插法，避免环形链表的问题</p>
</li>
<li><p>重新计算索引值的方法：索引不变，或者原来的索引 + oldCap (oldCap &#x3D; 原来哈希表的长度，即oldCapacity），不通过 hash&amp;(n-1) 重新计算索引值</p>
<p> 对于一个链表，可以直接生成两个链表，一个链表是扩容后仍处于原索引的元素构成的链表，另一个链表是扩容后处于原索引 + oldCap 的元素构成的链表，然后把这两个链表放到新数组的对应位置。</p>
<p> 根据 e.hash &amp; oldCap &#x3D;&#x3D; 0 来判断新的索引值</p>
</li>
</ol>
<p><strong>扩容后，索引值计算方法</strong></p>
<p>由于扩容后数组大小是原来的两倍，因此有如下计算特性：</p>
<p><img src="/2022/04/02/Java-Data-Structure/image-20220402142910110.png" alt="image-20220402142910110"></p>
<p>图中，a 是扩容前的哈希值和索引值，b 是扩容后的哈希值和索引值。可以看到，扩容不影响哈希值，只影响索引值，且只会对最高位产生影响（高位多一个1，或者仍为0）。<br>元素在重新计算 hash 之后，因为 n 变为 2 倍，那么 n-1 在高位多 1 bit，因此图中新的索引值就发生这样的变化：</p>
<p><img src="/2022/04/02/Java-Data-Structure/image-20220402142926082.png" alt="image-20220402142926082"></p>
<h2 id="HashMap-线程安全问题"><a href="#HashMap-线程安全问题" class="headerlink" title="HashMap 线程安全问题"></a>HashMap 线程安全问题</h2><p>HashMap 线程不安全，会导致的问题有：</p>
<ul>
<li><p>多线程下扩容死循环。JDK1.7 中的 HashMap 使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致环形链表的出现，形成死循环。因此，JDK1.8使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题。</p>
</li>
<li><p>多线程的 put 可能导致元素的丢失。多线程同时执行 put 操作，如果计算出来的索引位置是相同的，那会造成前一个 key 被后一个 key 覆盖，从而导致元素的丢失。</p>
</li>
<li><p>put 和 get 并发时，可能导致 get 为 null。线程 1 执行 put 时，如果导致扩容调用了 resize()，线程2此时执行 get，有可能导致这个问题。（resize() 时，原来哈希表的引用会被释放，即指向空）</p>
</li>
</ul>
<h2 id="HashMap-键的选择"><a href="#HashMap-键的选择" class="headerlink" title="HashMap 键的选择"></a>HashMap 键的选择</h2><p>要求作为 key 的类规范地重写了 hashCode() 以及 equals() 方法。（hashCode 求hash值，equals 判断key是否相同）</p>
<p>一般用 Integer、String 这种不可变类当 HashMap 的 key<br>String 最为常用。因为字符串是不可变的，所以在它创建的时候 hashcode 就被缓存了，不需要重新计算。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
</search>
